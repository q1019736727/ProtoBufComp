// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: satisfaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///  添加满意度调查问卷请求参数
/// /aist/app/AddSatisfaction
struct Protogo_AddSatisfactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 就诊医院的id
  var hospitalID: Int32 = 0

  /// 用户的uuid
  var accountID: String = String()

  /// 填写满意度时用户的类型 0:新客 1:老客
  var userType: String = String()

  /// 对员工的 满意度 分值 0~10
  var employeeSatisfaction: Int32 = 0

  /// 对美学顾问与专家的面诊内容满意分数
  var counselorProfessorSatisfaction: Int32 = 0

  /// 对术后医院的服务(回访，预约，关心)满意分数
  var postOperationSatisfaction: Int32 = 0

  /// 对整体治疗过程满意分数
  var wholeSatisfaction: Int32 = 0

  /// 对项目的效果满意分数
  var effectOfProgramSatisfaction: Int32 = 0

  ///(前端不传)是否考虑其他项目 0:考虑，1:不考虑，2:不知道
  var thinkOtherItemCode: Int32 = 0

  ///是否考虑其他项目 考虑,不考虑,不知道等
  var thinkOtherItemCodeStr: String = String()

  /// 考虑其他项目的项目id，为0时表示不考虑其他项目
  var thinkOtherItemID: Int32 = 0

  ///是否愿意推荐该医院 0~10
  var whetherRecommend: Int32 = 0

  /// 其他 意见
  var otherSuggestion: String = String()

  ///选择我们医院的理由
  var choiceReason: String = String()

  ///float integrated_satisfaction =13;// 综合得分
  var appointmentIndex: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_AddSatisfactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 根据用户id和医院id获取用户的就诊记录
/// /aist/app/GetUserAppointmentInfo
struct Protogo_GetUserAppointmentInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 就诊医院的id
  var hospitalID: Int32 = 0

  /// 用户的uuid
  var accountID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_GetUserAppointmentInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_GetUserAppointmentInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_GetUserAppointmentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 就诊医院的id
  var hospitalID: Int32 = 0

  /// 预约分诊id
  var appointmentIndex: Int32 = 0

  ///治疗项目
  var visitItem: String = String()

  ///医生名字
  var userName: String = String()

  ///就诊时间
  var diagTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_AddSatisfactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddSatisfactionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "user_type"),
    4: .standard(proto: "employee_satisfaction"),
    5: .standard(proto: "counselor_professor_satisfaction"),
    7: .standard(proto: "post_operation_satisfaction"),
    8: .standard(proto: "whole_satisfaction"),
    9: .standard(proto: "effect_of_program_satisfaction"),
    16: .standard(proto: "think_other_item_code"),
    17: .standard(proto: "think_other_item_code_str"),
    10: .standard(proto: "think_other_item_id"),
    14: .standard(proto: "whether_recommend"),
    11: .standard(proto: "other_suggestion"),
    12: .standard(proto: "choice_reason"),
    15: .standard(proto: "appointment_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.accountID)
      case 3: try decoder.decodeSingularStringField(value: &self.userType)
      case 4: try decoder.decodeSingularInt32Field(value: &self.employeeSatisfaction)
      case 5: try decoder.decodeSingularInt32Field(value: &self.counselorProfessorSatisfaction)
      case 7: try decoder.decodeSingularInt32Field(value: &self.postOperationSatisfaction)
      case 8: try decoder.decodeSingularInt32Field(value: &self.wholeSatisfaction)
      case 9: try decoder.decodeSingularInt32Field(value: &self.effectOfProgramSatisfaction)
      case 10: try decoder.decodeSingularInt32Field(value: &self.thinkOtherItemID)
      case 11: try decoder.decodeSingularStringField(value: &self.otherSuggestion)
      case 12: try decoder.decodeSingularStringField(value: &self.choiceReason)
      case 14: try decoder.decodeSingularInt32Field(value: &self.whetherRecommend)
      case 15: try decoder.decodeSingularInt32Field(value: &self.appointmentIndex)
      case 16: try decoder.decodeSingularInt32Field(value: &self.thinkOtherItemCode)
      case 17: try decoder.decodeSingularStringField(value: &self.thinkOtherItemCodeStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 2)
    }
    if !self.userType.isEmpty {
      try visitor.visitSingularStringField(value: self.userType, fieldNumber: 3)
    }
    if self.employeeSatisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.employeeSatisfaction, fieldNumber: 4)
    }
    if self.counselorProfessorSatisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.counselorProfessorSatisfaction, fieldNumber: 5)
    }
    if self.postOperationSatisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.postOperationSatisfaction, fieldNumber: 7)
    }
    if self.wholeSatisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.wholeSatisfaction, fieldNumber: 8)
    }
    if self.effectOfProgramSatisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.effectOfProgramSatisfaction, fieldNumber: 9)
    }
    if self.thinkOtherItemID != 0 {
      try visitor.visitSingularInt32Field(value: self.thinkOtherItemID, fieldNumber: 10)
    }
    if !self.otherSuggestion.isEmpty {
      try visitor.visitSingularStringField(value: self.otherSuggestion, fieldNumber: 11)
    }
    if !self.choiceReason.isEmpty {
      try visitor.visitSingularStringField(value: self.choiceReason, fieldNumber: 12)
    }
    if self.whetherRecommend != 0 {
      try visitor.visitSingularInt32Field(value: self.whetherRecommend, fieldNumber: 14)
    }
    if self.appointmentIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentIndex, fieldNumber: 15)
    }
    if self.thinkOtherItemCode != 0 {
      try visitor.visitSingularInt32Field(value: self.thinkOtherItemCode, fieldNumber: 16)
    }
    if !self.thinkOtherItemCodeStr.isEmpty {
      try visitor.visitSingularStringField(value: self.thinkOtherItemCodeStr, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AddSatisfactionRequest, rhs: Protogo_AddSatisfactionRequest) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userType != rhs.userType {return false}
    if lhs.employeeSatisfaction != rhs.employeeSatisfaction {return false}
    if lhs.counselorProfessorSatisfaction != rhs.counselorProfessorSatisfaction {return false}
    if lhs.postOperationSatisfaction != rhs.postOperationSatisfaction {return false}
    if lhs.wholeSatisfaction != rhs.wholeSatisfaction {return false}
    if lhs.effectOfProgramSatisfaction != rhs.effectOfProgramSatisfaction {return false}
    if lhs.thinkOtherItemCode != rhs.thinkOtherItemCode {return false}
    if lhs.thinkOtherItemCodeStr != rhs.thinkOtherItemCodeStr {return false}
    if lhs.thinkOtherItemID != rhs.thinkOtherItemID {return false}
    if lhs.whetherRecommend != rhs.whetherRecommend {return false}
    if lhs.otherSuggestion != rhs.otherSuggestion {return false}
    if lhs.choiceReason != rhs.choiceReason {return false}
    if lhs.appointmentIndex != rhs.appointmentIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AddSatisfactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddSatisfactionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AddSatisfactionResponse, rhs: Protogo_AddSatisfactionResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetUserAppointmentInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserAppointmentInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.accountID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetUserAppointmentInfoRequest, rhs: Protogo_GetUserAppointmentInfoRequest) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetUserAppointmentInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserAppointmentInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetUserAppointmentInfoResponse, rhs: Protogo_GetUserAppointmentInfoResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetUserAppointmentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserAppointmentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "appointment_index"),
    3: .standard(proto: "visit_item"),
    4: .standard(proto: "user_name"),
    5: .standard(proto: "diag_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.appointmentIndex)
      case 3: try decoder.decodeSingularStringField(value: &self.visitItem)
      case 4: try decoder.decodeSingularStringField(value: &self.userName)
      case 5: try decoder.decodeSingularStringField(value: &self.diagTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if self.appointmentIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentIndex, fieldNumber: 2)
    }
    if !self.visitItem.isEmpty {
      try visitor.visitSingularStringField(value: self.visitItem, fieldNumber: 3)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 4)
    }
    if !self.diagTime.isEmpty {
      try visitor.visitSingularStringField(value: self.diagTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetUserAppointmentInfo, rhs: Protogo_GetUserAppointmentInfo) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.appointmentIndex != rhs.appointmentIndex {return false}
    if lhs.visitItem != rhs.visitItem {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.diagTime != rhs.diagTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
