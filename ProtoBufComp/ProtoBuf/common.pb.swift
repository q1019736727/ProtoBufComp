// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///账号密码登录
///请求参数
struct Protogo_BaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var errCode: Int32 = 0

  var errMag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///用户基本信息
struct Protogo_UserBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户名称
  var userName: String = String()

  ///性别 1-女 2-男 3-未知
  var userGender: Int32 = 0

  ///用户生日
  var userBirthday: String = String()

  ///体重 0:40kg以下, 1:41-45kg, 2:46-50kg, 3:51-55kg, 4:56-60kg, 5:61-65kg, 6:66-70kg, 7:70kg以上
  var userWeight: Int32 = 0

  ///用户头像路径
  var userIcon: String = String()

  ///用户昵称
  var userNickname: String = String()

  ///用户地址
  var userAddr: String = String()

  ///用户手机号
  var userPhone: String = String()

  ///用户名称拼音
  var userPinyin: String = String()

  ///用户籍贯
  var userNativePlace: String = String()

  ///用户年龄
  var userAge: Int32 = 0

  /// 用户身份证
  var residenceNumber: String = String()

  /// 推荐人姓名
  var referrerName: String = String()

  /// 推荐人手机号
  var referrerPhone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///医生基本信息
struct Protogo_DoctorBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///医生id
  var accountID: Int32 = 0

  ///头像路径
  var userPhoto: String = String()

  ///姓名
  var userName: String = String()

  ///职称
  var userSysrole: String = String()

  ///从业年限
  var userCareer: Int32 = 0

  ///医院名称
  var hospitalName: String = String()

  ///医院id
  var hospitalID: Int32 = 0

  ///医生擅长
  var userExpertIn: String = String()

  ///面诊次数
  var visitNumbers: Int32 = 0

  ///面诊时长
  var visitTotaltimes: Int32 = 0

  ///性别 1-女 2-男 3-未知
  var userGender: Int32 = 0

  ///综合评分
  var userScore: Int32 = 0

  ///医生简介
  var userDesc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_HospitalBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///医院id
  var hospitalID: Int32 = 0

  ///医院头像路径
  var hospitalLogo: String = String()

  ///医院名称
  var hospitalName: String = String()

  ///医院地址
  var hospitalAddr: String = String()

  ///医院电话
  var hospitalTel: String = String()

  ///医院经纬度
  var hospitalCoordinate: String = String()

  ///医院医生数
  var doctorNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_Paging {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///分页页号
  var pageNo: Int32 = 0

  ///分页每页展示数
  var pageNum: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_ItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目id
  var itemID: Int32 = 0

  ///项目名
  var itemName: String = String()

  ///项目图片路径
  var iconPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_VideoProperty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var name: String = String()

  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///问诊单基本信息
struct Protogo_VisitBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///问诊项目
  var visitsItems: String = String()

  ///详细描述
  var visitsNotes: String = String()

  ///既往史
  var surgeryHistory: String = String()

  ///既往史备注
  var historyNotes: String = String()

  ///审美风格
  var aestheticStyle: String = String()

  ///疼痛忍耐程度
  var painTolerance: String = String()

  ///可接受恢复期
  var acceptableRecovery: String = String()

  ///可接受治疗手段
  var acceptableTreatment: String = String()

  ///预算范围
  var budgetScope: String = String()

  ///特殊需求
  var specialNeeds: String = String()

  ///面诊单号
  var visitsIndex: Int32 = 0

  ///是否可以编辑 1:可以编辑 2:不可以
  var edit: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_Album {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///医院图片路径
  var hospitalPicturePath: String = String()

  ///图片相册类型 ABC等依次为海报、荣誉照、环境照
  var hospitalAlbumType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_VideoCity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///城市编码
  var cityCode: Int32 = 0

  ///城市名
  var cityName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_ItemBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目id
  var itemID: String = String()

  ///项目图片路径
  var iconPath: String = String()

  ///项目名称
  var itemName: String = String()

  ///项目最低价
  var minPrice: Int32 = 0

  ///项目最高价
  var maxPrice: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_VideoSysrole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///医生职称id
  var sysroleID: Int32 = 0

  ///医生职称名
  var sysroleName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_ItemKindInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///一级分类id
  var firstID: Int32 = 0

  ///一级分类名称
  var firstName: String = String()

  ///一级分类id层级
  var firstLevel: Int32 = 0

  ///二级分类信息
  var seconds: [Protogo_SecondKindInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_SecondKindInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///二级分类id
  var secondID: Int32 = 0

  ///二级分类id层级
  var secondLevel: Int32 = 0

  ///二级分类名称
  var secondName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_ItemCollectInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户收藏状态：1已收藏 2:取消收藏
  var collectStatus: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///项目评价模块
struct Protogo_EvaluateInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///相关评价总数
  var evaluateTotal: Int32 = 0

  ///好评度
  var satisfaction: Int32 = 0

  ///评价标签统计信息
  var tags: [Protogo_EvaluateTagInfo] = []

  ///评价具体内容信息
  var details: [Protogo_EvaluateDetail] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_EvaluateTagInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tagID: Int32 = 0

  var tagName: String = String()

  ///标签对应评价数
  var tagTotal: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_EvaluateDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户头像
  var userIcon: String = String()

  var userNickname: String = String()

  ///用户满意度
  var satisfaction: Int32 = 0

  ///string item_icon =4;    //前端固定
  var skuName: String = String()

  var itemPicturePath: String = String()

  var itemVideoPath: String = String()

  ///评价内容
  var evaluateContent: String = String()

  ///评价时间
  var createTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///项目或者医院可以使用的红包信息
struct Protogo_VaildRedInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redID: Int32 = 0

  var redName: String = String()

  ///'面值'
  var redAmount: Int32 = 0

  ///'使用门槛 0:表示无门槛使用'
  var leastConsume: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///医生工作时间表
struct Protogo_DoctorSchedule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1可用，2占用
  var flag: Int32 = 0

  var workDate: String = String()

  ///医生排班时间
  var works: [Protogo_DoctorWorkTime] = []

  ///医生已被预约时间
  var appoints: [Protogo_DoctorAppointTime] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_DoctorWorkTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///工作开始时间
  var startTime: String = String()

  ///工作结束时间
  var endTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_DoctorAppointTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///预约开始时间
  var startTime: String = String()

  ///预约结束时间
  var endTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///红包详情
struct Protogo_RedBaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redID: Int32 = 0

  var redName: String = String()

  ///'面值'
  var redAmount: Int32 = 0

  ///'使用门槛 0:表示无门槛使用'
  var leastConsume: Int32 = 0

  ///可使用的项目
  var vaildItems: String = String()

  ///可使用的医院列表
  var vaildHospitals: String = String()

  ///有效日期  2020-01-01-202002-02 或者 领取后7日内使用
  var vaildDate: String = String()

  ///'使用说明'
  var instruction: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///用户订单记录及详情
struct Protogo_UserOrderItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目id
  var itemID: String = String()

  ///项目名
  var itemName: String = String()

  ///规格名
  var skuName: String = String()

  ///sku图片路径
  var skuPicture: String = String()

  ///规格单价
  var skuPrice: Int32 = 0

  ///购买数量
  var skuQuantity: Int32 = 0

  ///分类类型 1:项目 2：产品
  var itemType: Int32 = 0

  ///是否是赠品 1-非赠品，2-赠品
  var skuFlag: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///评价模块项目sku信息
struct Protogo_EvaluatedItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目id
  var itemID: String = String()

  ///项目图片路径
  var itemPicture: String = String()

  ///项目名
  var itemName: String = String()

  ///分类类型 1:项目 2：产品
  var itemType: Int32 = 0

  var skuID: Int32 = 0

  ///规格名
  var skuName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///贵宾卡样式
struct Protogo_VipStyle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///通用字体颜色
  var universalFontColor: String = String()

  ///通用字体背景色
  var universalFontBgcolor: String = String()

  ///按钮字体颜色
  var buttonFontColor: String = String()

  ///按钮字体背景色
  var buttonFontBgcolor: String = String()

  ///icon路径
  var iconPath: String = String()

  ///背景图路径
  var bgimagePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///项目赠品
struct Protogo_ItemGrantInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///产品名
  var produceName: String = String()

  ///skuid
  var skuID: Int32 = 0

  ///赠品规格名
  var skuName: String = String()

  ///赠送数量
  var quantity: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_BaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "err_code"),
    2: .standard(proto: "err_mag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.errCode)
      case 2: try decoder.decodeSingularStringField(value: &self.errMag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errCode != 0 {
      try visitor.visitSingularInt32Field(value: self.errCode, fieldNumber: 1)
    }
    if !self.errMag.isEmpty {
      try visitor.visitSingularStringField(value: self.errMag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_BaseResponse, rhs: Protogo_BaseResponse) -> Bool {
    if lhs.errCode != rhs.errCode {return false}
    if lhs.errMag != rhs.errMag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_name"),
    2: .standard(proto: "user_gender"),
    3: .standard(proto: "user_birthday"),
    4: .standard(proto: "user_weight"),
    5: .standard(proto: "user_icon"),
    6: .standard(proto: "user_nickname"),
    7: .standard(proto: "user_addr"),
    8: .standard(proto: "user_phone"),
    9: .standard(proto: "user_pinyin"),
    10: .standard(proto: "user_native_place"),
    11: .standard(proto: "user_age"),
    12: .standard(proto: "residence_number"),
    13: .standard(proto: "referrer_name"),
    14: .standard(proto: "referrer_phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.userGender)
      case 3: try decoder.decodeSingularStringField(value: &self.userBirthday)
      case 4: try decoder.decodeSingularInt32Field(value: &self.userWeight)
      case 5: try decoder.decodeSingularStringField(value: &self.userIcon)
      case 6: try decoder.decodeSingularStringField(value: &self.userNickname)
      case 7: try decoder.decodeSingularStringField(value: &self.userAddr)
      case 8: try decoder.decodeSingularStringField(value: &self.userPhone)
      case 9: try decoder.decodeSingularStringField(value: &self.userPinyin)
      case 10: try decoder.decodeSingularStringField(value: &self.userNativePlace)
      case 11: try decoder.decodeSingularInt32Field(value: &self.userAge)
      case 12: try decoder.decodeSingularStringField(value: &self.residenceNumber)
      case 13: try decoder.decodeSingularStringField(value: &self.referrerName)
      case 14: try decoder.decodeSingularStringField(value: &self.referrerPhone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 1)
    }
    if self.userGender != 0 {
      try visitor.visitSingularInt32Field(value: self.userGender, fieldNumber: 2)
    }
    if !self.userBirthday.isEmpty {
      try visitor.visitSingularStringField(value: self.userBirthday, fieldNumber: 3)
    }
    if self.userWeight != 0 {
      try visitor.visitSingularInt32Field(value: self.userWeight, fieldNumber: 4)
    }
    if !self.userIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.userIcon, fieldNumber: 5)
    }
    if !self.userNickname.isEmpty {
      try visitor.visitSingularStringField(value: self.userNickname, fieldNumber: 6)
    }
    if !self.userAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.userAddr, fieldNumber: 7)
    }
    if !self.userPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.userPhone, fieldNumber: 8)
    }
    if !self.userPinyin.isEmpty {
      try visitor.visitSingularStringField(value: self.userPinyin, fieldNumber: 9)
    }
    if !self.userNativePlace.isEmpty {
      try visitor.visitSingularStringField(value: self.userNativePlace, fieldNumber: 10)
    }
    if self.userAge != 0 {
      try visitor.visitSingularInt32Field(value: self.userAge, fieldNumber: 11)
    }
    if !self.residenceNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.residenceNumber, fieldNumber: 12)
    }
    if !self.referrerName.isEmpty {
      try visitor.visitSingularStringField(value: self.referrerName, fieldNumber: 13)
    }
    if !self.referrerPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.referrerPhone, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserBaseInfo, rhs: Protogo_UserBaseInfo) -> Bool {
    if lhs.userName != rhs.userName {return false}
    if lhs.userGender != rhs.userGender {return false}
    if lhs.userBirthday != rhs.userBirthday {return false}
    if lhs.userWeight != rhs.userWeight {return false}
    if lhs.userIcon != rhs.userIcon {return false}
    if lhs.userNickname != rhs.userNickname {return false}
    if lhs.userAddr != rhs.userAddr {return false}
    if lhs.userPhone != rhs.userPhone {return false}
    if lhs.userPinyin != rhs.userPinyin {return false}
    if lhs.userNativePlace != rhs.userNativePlace {return false}
    if lhs.userAge != rhs.userAge {return false}
    if lhs.residenceNumber != rhs.residenceNumber {return false}
    if lhs.referrerName != rhs.referrerName {return false}
    if lhs.referrerPhone != rhs.referrerPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DoctorBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoctorBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "user_photo"),
    3: .standard(proto: "user_name"),
    4: .standard(proto: "user_sysrole"),
    5: .standard(proto: "user_career"),
    6: .standard(proto: "hospital_name"),
    7: .standard(proto: "hospital_id"),
    8: .standard(proto: "user_expert_in"),
    9: .standard(proto: "visit_numbers"),
    10: .standard(proto: "visit_totaltimes"),
    11: .standard(proto: "user_gender"),
    12: .standard(proto: "user_score"),
    13: .standard(proto: "user_desc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.userPhoto)
      case 3: try decoder.decodeSingularStringField(value: &self.userName)
      case 4: try decoder.decodeSingularStringField(value: &self.userSysrole)
      case 5: try decoder.decodeSingularInt32Field(value: &self.userCareer)
      case 6: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 7: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 8: try decoder.decodeSingularStringField(value: &self.userExpertIn)
      case 9: try decoder.decodeSingularInt32Field(value: &self.visitNumbers)
      case 10: try decoder.decodeSingularInt32Field(value: &self.visitTotaltimes)
      case 11: try decoder.decodeSingularInt32Field(value: &self.userGender)
      case 12: try decoder.decodeSingularInt32Field(value: &self.userScore)
      case 13: try decoder.decodeSingularStringField(value: &self.userDesc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountID != 0 {
      try visitor.visitSingularInt32Field(value: self.accountID, fieldNumber: 1)
    }
    if !self.userPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.userPhoto, fieldNumber: 2)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 3)
    }
    if !self.userSysrole.isEmpty {
      try visitor.visitSingularStringField(value: self.userSysrole, fieldNumber: 4)
    }
    if self.userCareer != 0 {
      try visitor.visitSingularInt32Field(value: self.userCareer, fieldNumber: 5)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 6)
    }
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 7)
    }
    if !self.userExpertIn.isEmpty {
      try visitor.visitSingularStringField(value: self.userExpertIn, fieldNumber: 8)
    }
    if self.visitNumbers != 0 {
      try visitor.visitSingularInt32Field(value: self.visitNumbers, fieldNumber: 9)
    }
    if self.visitTotaltimes != 0 {
      try visitor.visitSingularInt32Field(value: self.visitTotaltimes, fieldNumber: 10)
    }
    if self.userGender != 0 {
      try visitor.visitSingularInt32Field(value: self.userGender, fieldNumber: 11)
    }
    if self.userScore != 0 {
      try visitor.visitSingularInt32Field(value: self.userScore, fieldNumber: 12)
    }
    if !self.userDesc.isEmpty {
      try visitor.visitSingularStringField(value: self.userDesc, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DoctorBaseInfo, rhs: Protogo_DoctorBaseInfo) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userPhoto != rhs.userPhoto {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.userSysrole != rhs.userSysrole {return false}
    if lhs.userCareer != rhs.userCareer {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.userExpertIn != rhs.userExpertIn {return false}
    if lhs.visitNumbers != rhs.visitNumbers {return false}
    if lhs.visitTotaltimes != rhs.visitTotaltimes {return false}
    if lhs.userGender != rhs.userGender {return false}
    if lhs.userScore != rhs.userScore {return false}
    if lhs.userDesc != rhs.userDesc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_HospitalBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HospitalBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_logo"),
    3: .standard(proto: "hospital_name"),
    4: .standard(proto: "hospital_addr"),
    5: .standard(proto: "hospital_tel"),
    6: .standard(proto: "hospital_coordinate"),
    7: .standard(proto: "doctor_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 4: try decoder.decodeSingularStringField(value: &self.hospitalAddr)
      case 5: try decoder.decodeSingularStringField(value: &self.hospitalTel)
      case 6: try decoder.decodeSingularStringField(value: &self.hospitalCoordinate)
      case 7: try decoder.decodeSingularInt32Field(value: &self.doctorNumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 2)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 3)
    }
    if !self.hospitalAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddr, fieldNumber: 4)
    }
    if !self.hospitalTel.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalTel, fieldNumber: 5)
    }
    if !self.hospitalCoordinate.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalCoordinate, fieldNumber: 6)
    }
    if self.doctorNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.doctorNumber, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_HospitalBaseInfo, rhs: Protogo_HospitalBaseInfo) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalAddr != rhs.hospitalAddr {return false}
    if lhs.hospitalTel != rhs.hospitalTel {return false}
    if lhs.hospitalCoordinate != rhs.hospitalCoordinate {return false}
    if lhs.doctorNumber != rhs.doctorNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_Paging: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Paging"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Page_No"),
    2: .standard(proto: "Page_Num"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.pageNo)
      case 2: try decoder.decodeSingularInt32Field(value: &self.pageNum)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageNo != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNo, fieldNumber: 1)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_Paging, rhs: Protogo_Paging) -> Bool {
    if lhs.pageNo != rhs.pageNo {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "item_name"),
    3: .standard(proto: "icon_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularStringField(value: &self.iconPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.itemID != 0 {
      try visitor.visitSingularInt32Field(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if !self.iconPath.isEmpty {
      try visitor.visitSingularStringField(value: self.iconPath, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ItemInfo, rhs: Protogo_ItemInfo) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.iconPath != rhs.iconPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VideoProperty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoProperty"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VideoProperty, rhs: Protogo_VideoProperty) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VisitBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisitBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "visits_items"),
    2: .standard(proto: "visits_notes"),
    3: .standard(proto: "surgery_history"),
    4: .standard(proto: "history_notes"),
    5: .standard(proto: "aesthetic_style"),
    6: .standard(proto: "pain_tolerance"),
    7: .standard(proto: "acceptable_recovery"),
    8: .standard(proto: "acceptable_treatment"),
    9: .standard(proto: "budget_scope"),
    10: .standard(proto: "special_needs"),
    11: .standard(proto: "visits_index"),
    12: .same(proto: "edit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.visitsItems)
      case 2: try decoder.decodeSingularStringField(value: &self.visitsNotes)
      case 3: try decoder.decodeSingularStringField(value: &self.surgeryHistory)
      case 4: try decoder.decodeSingularStringField(value: &self.historyNotes)
      case 5: try decoder.decodeSingularStringField(value: &self.aestheticStyle)
      case 6: try decoder.decodeSingularStringField(value: &self.painTolerance)
      case 7: try decoder.decodeSingularStringField(value: &self.acceptableRecovery)
      case 8: try decoder.decodeSingularStringField(value: &self.acceptableTreatment)
      case 9: try decoder.decodeSingularStringField(value: &self.budgetScope)
      case 10: try decoder.decodeSingularStringField(value: &self.specialNeeds)
      case 11: try decoder.decodeSingularInt32Field(value: &self.visitsIndex)
      case 12: try decoder.decodeSingularInt32Field(value: &self.edit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.visitsItems.isEmpty {
      try visitor.visitSingularStringField(value: self.visitsItems, fieldNumber: 1)
    }
    if !self.visitsNotes.isEmpty {
      try visitor.visitSingularStringField(value: self.visitsNotes, fieldNumber: 2)
    }
    if !self.surgeryHistory.isEmpty {
      try visitor.visitSingularStringField(value: self.surgeryHistory, fieldNumber: 3)
    }
    if !self.historyNotes.isEmpty {
      try visitor.visitSingularStringField(value: self.historyNotes, fieldNumber: 4)
    }
    if !self.aestheticStyle.isEmpty {
      try visitor.visitSingularStringField(value: self.aestheticStyle, fieldNumber: 5)
    }
    if !self.painTolerance.isEmpty {
      try visitor.visitSingularStringField(value: self.painTolerance, fieldNumber: 6)
    }
    if !self.acceptableRecovery.isEmpty {
      try visitor.visitSingularStringField(value: self.acceptableRecovery, fieldNumber: 7)
    }
    if !self.acceptableTreatment.isEmpty {
      try visitor.visitSingularStringField(value: self.acceptableTreatment, fieldNumber: 8)
    }
    if !self.budgetScope.isEmpty {
      try visitor.visitSingularStringField(value: self.budgetScope, fieldNumber: 9)
    }
    if !self.specialNeeds.isEmpty {
      try visitor.visitSingularStringField(value: self.specialNeeds, fieldNumber: 10)
    }
    if self.visitsIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.visitsIndex, fieldNumber: 11)
    }
    if self.edit != 0 {
      try visitor.visitSingularInt32Field(value: self.edit, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VisitBaseInfo, rhs: Protogo_VisitBaseInfo) -> Bool {
    if lhs.visitsItems != rhs.visitsItems {return false}
    if lhs.visitsNotes != rhs.visitsNotes {return false}
    if lhs.surgeryHistory != rhs.surgeryHistory {return false}
    if lhs.historyNotes != rhs.historyNotes {return false}
    if lhs.aestheticStyle != rhs.aestheticStyle {return false}
    if lhs.painTolerance != rhs.painTolerance {return false}
    if lhs.acceptableRecovery != rhs.acceptableRecovery {return false}
    if lhs.acceptableTreatment != rhs.acceptableTreatment {return false}
    if lhs.budgetScope != rhs.budgetScope {return false}
    if lhs.specialNeeds != rhs.specialNeeds {return false}
    if lhs.visitsIndex != rhs.visitsIndex {return false}
    if lhs.edit != rhs.edit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_Album: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Album"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_picture_path"),
    2: .standard(proto: "hospital_album_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hospitalPicturePath)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalAlbumType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hospitalPicturePath.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalPicturePath, fieldNumber: 1)
    }
    if !self.hospitalAlbumType.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAlbumType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_Album, rhs: Protogo_Album) -> Bool {
    if lhs.hospitalPicturePath != rhs.hospitalPicturePath {return false}
    if lhs.hospitalAlbumType != rhs.hospitalAlbumType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VideoCity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoCity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "city_code"),
    2: .standard(proto: "city_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cityCode)
      case 2: try decoder.decodeSingularStringField(value: &self.cityName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cityCode != 0 {
      try visitor.visitSingularInt32Field(value: self.cityCode, fieldNumber: 1)
    }
    if !self.cityName.isEmpty {
      try visitor.visitSingularStringField(value: self.cityName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VideoCity, rhs: Protogo_VideoCity) -> Bool {
    if lhs.cityCode != rhs.cityCode {return false}
    if lhs.cityName != rhs.cityName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ItemBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "icon_path"),
    3: .standard(proto: "item_name"),
    4: .standard(proto: "min_price"),
    5: .standard(proto: "max_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.iconPath)
      case 3: try decoder.decodeSingularStringField(value: &self.itemName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.minPrice)
      case 5: try decoder.decodeSingularInt32Field(value: &self.maxPrice)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 1)
    }
    if !self.iconPath.isEmpty {
      try visitor.visitSingularStringField(value: self.iconPath, fieldNumber: 2)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 3)
    }
    if self.minPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.minPrice, fieldNumber: 4)
    }
    if self.maxPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.maxPrice, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ItemBaseInfo, rhs: Protogo_ItemBaseInfo) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.iconPath != rhs.iconPath {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.minPrice != rhs.minPrice {return false}
    if lhs.maxPrice != rhs.maxPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VideoSysrole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoSysrole"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sysrole_id"),
    2: .standard(proto: "sysrole_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.sysroleID)
      case 2: try decoder.decodeSingularStringField(value: &self.sysroleName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sysroleID != 0 {
      try visitor.visitSingularInt32Field(value: self.sysroleID, fieldNumber: 1)
    }
    if !self.sysroleName.isEmpty {
      try visitor.visitSingularStringField(value: self.sysroleName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VideoSysrole, rhs: Protogo_VideoSysrole) -> Bool {
    if lhs.sysroleID != rhs.sysroleID {return false}
    if lhs.sysroleName != rhs.sysroleName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ItemKindInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemKindInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "First_id"),
    2: .standard(proto: "First_name"),
    3: .standard(proto: "First_level"),
    4: .same(proto: "seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.firstID)
      case 2: try decoder.decodeSingularStringField(value: &self.firstName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.firstLevel)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.seconds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.firstID != 0 {
      try visitor.visitSingularInt32Field(value: self.firstID, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if self.firstLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.firstLevel, fieldNumber: 3)
    }
    if !self.seconds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seconds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ItemKindInfo, rhs: Protogo_ItemKindInfo) -> Bool {
    if lhs.firstID != rhs.firstID {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.firstLevel != rhs.firstLevel {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_SecondKindInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SecondKindInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Second_id"),
    2: .standard(proto: "Second_level"),
    3: .standard(proto: "Second_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.secondID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.secondLevel)
      case 3: try decoder.decodeSingularStringField(value: &self.secondName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.secondID != 0 {
      try visitor.visitSingularInt32Field(value: self.secondID, fieldNumber: 1)
    }
    if self.secondLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.secondLevel, fieldNumber: 2)
    }
    if !self.secondName.isEmpty {
      try visitor.visitSingularStringField(value: self.secondName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_SecondKindInfo, rhs: Protogo_SecondKindInfo) -> Bool {
    if lhs.secondID != rhs.secondID {return false}
    if lhs.secondLevel != rhs.secondLevel {return false}
    if lhs.secondName != rhs.secondName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ItemCollectInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemCollectInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collect_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.collectStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.collectStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.collectStatus, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ItemCollectInfo, rhs: Protogo_ItemCollectInfo) -> Bool {
    if lhs.collectStatus != rhs.collectStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_EvaluateInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "evaluate_total"),
    2: .same(proto: "satisfaction"),
    3: .same(proto: "tags"),
    4: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.evaluateTotal)
      case 2: try decoder.decodeSingularInt32Field(value: &self.satisfaction)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.details)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.evaluateTotal != 0 {
      try visitor.visitSingularInt32Field(value: self.evaluateTotal, fieldNumber: 1)
    }
    if self.satisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.satisfaction, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 3)
    }
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_EvaluateInfo, rhs: Protogo_EvaluateInfo) -> Bool {
    if lhs.evaluateTotal != rhs.evaluateTotal {return false}
    if lhs.satisfaction != rhs.satisfaction {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_EvaluateTagInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateTagInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tag_id"),
    2: .standard(proto: "tag_name"),
    3: .standard(proto: "tag_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tagID)
      case 2: try decoder.decodeSingularStringField(value: &self.tagName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.tagTotal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tagID != 0 {
      try visitor.visitSingularInt32Field(value: self.tagID, fieldNumber: 1)
    }
    if !self.tagName.isEmpty {
      try visitor.visitSingularStringField(value: self.tagName, fieldNumber: 2)
    }
    if self.tagTotal != 0 {
      try visitor.visitSingularInt32Field(value: self.tagTotal, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_EvaluateTagInfo, rhs: Protogo_EvaluateTagInfo) -> Bool {
    if lhs.tagID != rhs.tagID {return false}
    if lhs.tagName != rhs.tagName {return false}
    if lhs.tagTotal != rhs.tagTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_EvaluateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_icon"),
    2: .standard(proto: "user_nickname"),
    3: .same(proto: "satisfaction"),
    4: .standard(proto: "sku_name"),
    6: .standard(proto: "item_picture_path"),
    7: .standard(proto: "item_video_path"),
    8: .standard(proto: "evaluate_content"),
    9: .standard(proto: "create_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userIcon)
      case 2: try decoder.decodeSingularStringField(value: &self.userNickname)
      case 3: try decoder.decodeSingularInt32Field(value: &self.satisfaction)
      case 4: try decoder.decodeSingularStringField(value: &self.skuName)
      case 6: try decoder.decodeSingularStringField(value: &self.itemPicturePath)
      case 7: try decoder.decodeSingularStringField(value: &self.itemVideoPath)
      case 8: try decoder.decodeSingularStringField(value: &self.evaluateContent)
      case 9: try decoder.decodeSingularStringField(value: &self.createTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.userIcon, fieldNumber: 1)
    }
    if !self.userNickname.isEmpty {
      try visitor.visitSingularStringField(value: self.userNickname, fieldNumber: 2)
    }
    if self.satisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.satisfaction, fieldNumber: 3)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 4)
    }
    if !self.itemPicturePath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicturePath, fieldNumber: 6)
    }
    if !self.itemVideoPath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemVideoPath, fieldNumber: 7)
    }
    if !self.evaluateContent.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluateContent, fieldNumber: 8)
    }
    if !self.createTime.isEmpty {
      try visitor.visitSingularStringField(value: self.createTime, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_EvaluateDetail, rhs: Protogo_EvaluateDetail) -> Bool {
    if lhs.userIcon != rhs.userIcon {return false}
    if lhs.userNickname != rhs.userNickname {return false}
    if lhs.satisfaction != rhs.satisfaction {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.itemPicturePath != rhs.itemPicturePath {return false}
    if lhs.itemVideoPath != rhs.itemVideoPath {return false}
    if lhs.evaluateContent != rhs.evaluateContent {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VaildRedInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VaildRedInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "red_id"),
    2: .standard(proto: "red_name"),
    3: .standard(proto: "red_amount"),
    4: .standard(proto: "least_consume"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.redID)
      case 2: try decoder.decodeSingularStringField(value: &self.redName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.redAmount)
      case 4: try decoder.decodeSingularInt32Field(value: &self.leastConsume)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.redID != 0 {
      try visitor.visitSingularInt32Field(value: self.redID, fieldNumber: 1)
    }
    if !self.redName.isEmpty {
      try visitor.visitSingularStringField(value: self.redName, fieldNumber: 2)
    }
    if self.redAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.redAmount, fieldNumber: 3)
    }
    if self.leastConsume != 0 {
      try visitor.visitSingularInt32Field(value: self.leastConsume, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VaildRedInfo, rhs: Protogo_VaildRedInfo) -> Bool {
    if lhs.redID != rhs.redID {return false}
    if lhs.redName != rhs.redName {return false}
    if lhs.redAmount != rhs.redAmount {return false}
    if lhs.leastConsume != rhs.leastConsume {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DoctorSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoctorSchedule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flag"),
    2: .standard(proto: "work_date"),
    3: .same(proto: "works"),
    4: .same(proto: "appoints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.flag)
      case 2: try decoder.decodeSingularStringField(value: &self.workDate)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.works)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.appoints)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.flag != 0 {
      try visitor.visitSingularInt32Field(value: self.flag, fieldNumber: 1)
    }
    if !self.workDate.isEmpty {
      try visitor.visitSingularStringField(value: self.workDate, fieldNumber: 2)
    }
    if !self.works.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.works, fieldNumber: 3)
    }
    if !self.appoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appoints, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DoctorSchedule, rhs: Protogo_DoctorSchedule) -> Bool {
    if lhs.flag != rhs.flag {return false}
    if lhs.workDate != rhs.workDate {return false}
    if lhs.works != rhs.works {return false}
    if lhs.appoints != rhs.appoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DoctorWorkTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoctorWorkTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.startTime)
      case 2: try decoder.decodeSingularStringField(value: &self.endTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 1)
    }
    if !self.endTime.isEmpty {
      try visitor.visitSingularStringField(value: self.endTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DoctorWorkTime, rhs: Protogo_DoctorWorkTime) -> Bool {
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DoctorAppointTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoctorAppointTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.startTime)
      case 2: try decoder.decodeSingularStringField(value: &self.endTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 1)
    }
    if !self.endTime.isEmpty {
      try visitor.visitSingularStringField(value: self.endTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DoctorAppointTime, rhs: Protogo_DoctorAppointTime) -> Bool {
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_RedBaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedBaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "red_id"),
    2: .standard(proto: "red_name"),
    3: .standard(proto: "red_amount"),
    4: .standard(proto: "least_consume"),
    5: .standard(proto: "vaild_items"),
    6: .standard(proto: "vaild_hospitals"),
    7: .standard(proto: "vaild_date"),
    8: .same(proto: "instruction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.redID)
      case 2: try decoder.decodeSingularStringField(value: &self.redName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.redAmount)
      case 4: try decoder.decodeSingularInt32Field(value: &self.leastConsume)
      case 5: try decoder.decodeSingularStringField(value: &self.vaildItems)
      case 6: try decoder.decodeSingularStringField(value: &self.vaildHospitals)
      case 7: try decoder.decodeSingularStringField(value: &self.vaildDate)
      case 8: try decoder.decodeSingularStringField(value: &self.instruction)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.redID != 0 {
      try visitor.visitSingularInt32Field(value: self.redID, fieldNumber: 1)
    }
    if !self.redName.isEmpty {
      try visitor.visitSingularStringField(value: self.redName, fieldNumber: 2)
    }
    if self.redAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.redAmount, fieldNumber: 3)
    }
    if self.leastConsume != 0 {
      try visitor.visitSingularInt32Field(value: self.leastConsume, fieldNumber: 4)
    }
    if !self.vaildItems.isEmpty {
      try visitor.visitSingularStringField(value: self.vaildItems, fieldNumber: 5)
    }
    if !self.vaildHospitals.isEmpty {
      try visitor.visitSingularStringField(value: self.vaildHospitals, fieldNumber: 6)
    }
    if !self.vaildDate.isEmpty {
      try visitor.visitSingularStringField(value: self.vaildDate, fieldNumber: 7)
    }
    if !self.instruction.isEmpty {
      try visitor.visitSingularStringField(value: self.instruction, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_RedBaseInfo, rhs: Protogo_RedBaseInfo) -> Bool {
    if lhs.redID != rhs.redID {return false}
    if lhs.redName != rhs.redName {return false}
    if lhs.redAmount != rhs.redAmount {return false}
    if lhs.leastConsume != rhs.leastConsume {return false}
    if lhs.vaildItems != rhs.vaildItems {return false}
    if lhs.vaildHospitals != rhs.vaildHospitals {return false}
    if lhs.vaildDate != rhs.vaildDate {return false}
    if lhs.instruction != rhs.instruction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "item_name"),
    3: .standard(proto: "sku_name"),
    4: .standard(proto: "sku_picture"),
    5: .standard(proto: "sku_price"),
    6: .standard(proto: "sku_quantity"),
    7: .standard(proto: "item_type"),
    8: .standard(proto: "sku_flag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularStringField(value: &self.skuName)
      case 4: try decoder.decodeSingularStringField(value: &self.skuPicture)
      case 5: try decoder.decodeSingularInt32Field(value: &self.skuPrice)
      case 6: try decoder.decodeSingularInt32Field(value: &self.skuQuantity)
      case 7: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 8: try decoder.decodeSingularInt32Field(value: &self.skuFlag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 3)
    }
    if !self.skuPicture.isEmpty {
      try visitor.visitSingularStringField(value: self.skuPicture, fieldNumber: 4)
    }
    if self.skuPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.skuPrice, fieldNumber: 5)
    }
    if self.skuQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.skuQuantity, fieldNumber: 6)
    }
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 7)
    }
    if self.skuFlag != 0 {
      try visitor.visitSingularInt32Field(value: self.skuFlag, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderItemInfo, rhs: Protogo_UserOrderItemInfo) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.skuPicture != rhs.skuPicture {return false}
    if lhs.skuPrice != rhs.skuPrice {return false}
    if lhs.skuQuantity != rhs.skuQuantity {return false}
    if lhs.itemType != rhs.itemType {return false}
    if lhs.skuFlag != rhs.skuFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_EvaluatedItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluatedItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "item_picture"),
    3: .standard(proto: "item_name"),
    4: .standard(proto: "item_type"),
    5: .standard(proto: "sku_id"),
    6: .standard(proto: "sku_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemPicture)
      case 3: try decoder.decodeSingularStringField(value: &self.itemName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 5: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 6: try decoder.decodeSingularStringField(value: &self.skuName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemPicture.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicture, fieldNumber: 2)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 3)
    }
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 4)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 5)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_EvaluatedItemInfo, rhs: Protogo_EvaluatedItemInfo) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemPicture != rhs.itemPicture {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.itemType != rhs.itemType {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_VipStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VipStyle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "universal_font_color"),
    2: .standard(proto: "universal_font_bgcolor"),
    3: .standard(proto: "button_font_color"),
    4: .standard(proto: "button_font_bgcolor"),
    5: .standard(proto: "icon_path"),
    6: .standard(proto: "bgimage_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.universalFontColor)
      case 2: try decoder.decodeSingularStringField(value: &self.universalFontBgcolor)
      case 3: try decoder.decodeSingularStringField(value: &self.buttonFontColor)
      case 4: try decoder.decodeSingularStringField(value: &self.buttonFontBgcolor)
      case 5: try decoder.decodeSingularStringField(value: &self.iconPath)
      case 6: try decoder.decodeSingularStringField(value: &self.bgimagePath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.universalFontColor.isEmpty {
      try visitor.visitSingularStringField(value: self.universalFontColor, fieldNumber: 1)
    }
    if !self.universalFontBgcolor.isEmpty {
      try visitor.visitSingularStringField(value: self.universalFontBgcolor, fieldNumber: 2)
    }
    if !self.buttonFontColor.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonFontColor, fieldNumber: 3)
    }
    if !self.buttonFontBgcolor.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonFontBgcolor, fieldNumber: 4)
    }
    if !self.iconPath.isEmpty {
      try visitor.visitSingularStringField(value: self.iconPath, fieldNumber: 5)
    }
    if !self.bgimagePath.isEmpty {
      try visitor.visitSingularStringField(value: self.bgimagePath, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_VipStyle, rhs: Protogo_VipStyle) -> Bool {
    if lhs.universalFontColor != rhs.universalFontColor {return false}
    if lhs.universalFontBgcolor != rhs.universalFontBgcolor {return false}
    if lhs.buttonFontColor != rhs.buttonFontColor {return false}
    if lhs.buttonFontBgcolor != rhs.buttonFontBgcolor {return false}
    if lhs.iconPath != rhs.iconPath {return false}
    if lhs.bgimagePath != rhs.bgimagePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ItemGrantInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItemGrantInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "produce_name"),
    2: .standard(proto: "sku_id"),
    3: .standard(proto: "sku_name"),
    4: .same(proto: "quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.produceName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 3: try decoder.decodeSingularStringField(value: &self.skuName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.quantity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.produceName.isEmpty {
      try visitor.visitSingularStringField(value: self.produceName, fieldNumber: 1)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 2)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 3)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ItemGrantInfo, rhs: Protogo_ItemGrantInfo) -> Bool {
    if lhs.produceName != rhs.produceName {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
