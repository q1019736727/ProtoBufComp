// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: public.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///  往选项表中添加选项请求参数
/// /aist/app/AddSelectMapItem
struct Protogo_AddSelectMapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 选择项的名字
  var selectName: String = String()

  /// 排序值
  var orderValue: Int32 = 0

  /// 选择项子项的名字
  var selectItemName: String = String()

  /// 值
  var value: String = String()

  /// 说明
  var explain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_AddSelectMapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///  获取选项表请求参数
/// /aist/app/GetSelectMapList
struct Protogo_GetSelectMapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 选择项的名字 不模糊查询,为空全查询
  var selectName: String = String()

  ///页码
  var page: Int32 = 0

  ///当page_len=0时表示全查询,但也只是至多100条，具体是不是全部，当page=1时，返回的count比较就知道了
  var pageLen: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_SelectMapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  /// 当请求page=1时有效
  var count: Int32 = 0

  var data: [Protogo_SelectMap] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_SelectMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///主键id，修改条件
  var id: Int32 = 0

  /// 选择项的名字
  var selectName: String = String()

  /// 排序值
  var orderValue: Int32 = 0

  /// 选择项子项的名字
  var selectItemName: String = String()

  /// 值
  var value: String = String()

  /// 说明
  var explain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 根据id修改选项表指定id数据
/// /aist/app/UpdateSelectMapById
struct Protogo_UpdateSelectMapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///主键id，修改条件
  var id: Int32 = 0

  /// 选择项的名字
  var selectName: String = String()

  /// 排序值
  var orderValue: Int32 = 0

  /// 选择项子项的名字
  var selectItemName: String = String()

  /// 值
  var value: String = String()

  /// 说明
  var explain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_UpdateSelectMapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 根据id删除选项表指定id数据
/// /aist/app/DeleteSelectMapById
struct Protogo_DeleteSelectMapRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///主键id，删除条件
  var id: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_DeleteSelectMapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_AddSelectMapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddSelectMapRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "select_name"),
    2: .standard(proto: "order_value"),
    3: .standard(proto: "select_item_name"),
    4: .same(proto: "value"),
    5: .same(proto: "explain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.selectName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.orderValue)
      case 3: try decoder.decodeSingularStringField(value: &self.selectItemName)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      case 5: try decoder.decodeSingularStringField(value: &self.explain)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectName, fieldNumber: 1)
    }
    if self.orderValue != 0 {
      try visitor.visitSingularInt32Field(value: self.orderValue, fieldNumber: 2)
    }
    if !self.selectItemName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectItemName, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.explain.isEmpty {
      try visitor.visitSingularStringField(value: self.explain, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AddSelectMapRequest, rhs: Protogo_AddSelectMapRequest) -> Bool {
    if lhs.selectName != rhs.selectName {return false}
    if lhs.orderValue != rhs.orderValue {return false}
    if lhs.selectItemName != rhs.selectItemName {return false}
    if lhs.value != rhs.value {return false}
    if lhs.explain != rhs.explain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AddSelectMapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddSelectMapResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AddSelectMapResponse, rhs: Protogo_AddSelectMapResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetSelectMapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSelectMapRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "select_name"),
    2: .same(proto: "page"),
    3: .standard(proto: "page_len"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.selectName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.pageLen)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectName, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.pageLen != 0 {
      try visitor.visitSingularInt32Field(value: self.pageLen, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetSelectMapRequest, rhs: Protogo_GetSelectMapRequest) -> Bool {
    if lhs.selectName != rhs.selectName {return false}
    if lhs.page != rhs.page {return false}
    if lhs.pageLen != rhs.pageLen {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_SelectMapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelectMapResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    3: .same(proto: "count"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_SelectMapResponse, rhs: Protogo_SelectMapResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.count != rhs.count {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_SelectMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SelectMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "id"),
    1: .standard(proto: "select_name"),
    2: .standard(proto: "order_value"),
    3: .standard(proto: "select_item_name"),
    4: .same(proto: "value"),
    5: .same(proto: "explain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.selectName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.orderValue)
      case 3: try decoder.decodeSingularStringField(value: &self.selectItemName)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      case 5: try decoder.decodeSingularStringField(value: &self.explain)
      case 6: try decoder.decodeSingularInt32Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectName, fieldNumber: 1)
    }
    if self.orderValue != 0 {
      try visitor.visitSingularInt32Field(value: self.orderValue, fieldNumber: 2)
    }
    if !self.selectItemName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectItemName, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.explain.isEmpty {
      try visitor.visitSingularStringField(value: self.explain, fieldNumber: 5)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_SelectMap, rhs: Protogo_SelectMap) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.selectName != rhs.selectName {return false}
    if lhs.orderValue != rhs.orderValue {return false}
    if lhs.selectItemName != rhs.selectItemName {return false}
    if lhs.value != rhs.value {return false}
    if lhs.explain != rhs.explain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UpdateSelectMapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateSelectMapRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "id"),
    1: .standard(proto: "select_name"),
    2: .standard(proto: "order_value"),
    3: .standard(proto: "select_item_name"),
    4: .same(proto: "value"),
    5: .same(proto: "explain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.selectName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.orderValue)
      case 3: try decoder.decodeSingularStringField(value: &self.selectItemName)
      case 4: try decoder.decodeSingularStringField(value: &self.value)
      case 5: try decoder.decodeSingularStringField(value: &self.explain)
      case 6: try decoder.decodeSingularInt32Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectName, fieldNumber: 1)
    }
    if self.orderValue != 0 {
      try visitor.visitSingularInt32Field(value: self.orderValue, fieldNumber: 2)
    }
    if !self.selectItemName.isEmpty {
      try visitor.visitSingularStringField(value: self.selectItemName, fieldNumber: 3)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.explain.isEmpty {
      try visitor.visitSingularStringField(value: self.explain, fieldNumber: 5)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UpdateSelectMapRequest, rhs: Protogo_UpdateSelectMapRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.selectName != rhs.selectName {return false}
    if lhs.orderValue != rhs.orderValue {return false}
    if lhs.selectItemName != rhs.selectItemName {return false}
    if lhs.value != rhs.value {return false}
    if lhs.explain != rhs.explain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UpdateSelectMapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateSelectMapResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UpdateSelectMapResponse, rhs: Protogo_UpdateSelectMapResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DeleteSelectMapRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteSelectMapRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 6: try decoder.decodeSingularInt32Field(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DeleteSelectMapRequest, rhs: Protogo_DeleteSelectMapRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_DeleteSelectMapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteSelectMapResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_DeleteSelectMapResponse, rhs: Protogo_DeleteSelectMapResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
