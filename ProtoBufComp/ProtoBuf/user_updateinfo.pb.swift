// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_updateinfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///修改用户信息
struct Protogo_UpdateUserInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userPhone: String = String()

  var userName: String = String()

  var userNickname: String = String()

  var userIcon: String = String()

  var userPinyin: String = String()

  var userGender: UInt32 = 0

  var userWeight: UInt32 = 0

  var userBirthday: String = String()

  var userNativePlace: String = String()

  var userAddr: String = String()

  var accountID: String = String()

  ///用户年龄
  var userAge: Int32 = 0

  /// 用户身份证
  var residenceNumber: String = String()

  /// 推荐人姓名
  var referrerName: String = String()

  /// 推荐人手机号
  var referrerPhone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_UpdateUserInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_UpdateUserInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_phone"),
    2: .standard(proto: "user_name"),
    3: .standard(proto: "user_nickname"),
    4: .standard(proto: "user_icon"),
    5: .standard(proto: "user_pinyin"),
    6: .standard(proto: "user_gender"),
    7: .standard(proto: "user_weight"),
    8: .standard(proto: "user_birthday"),
    9: .standard(proto: "user_native_place"),
    10: .standard(proto: "user_addr"),
    11: .standard(proto: "account_id"),
    12: .standard(proto: "user_age"),
    13: .standard(proto: "residence_number"),
    14: .standard(proto: "referrer_name"),
    15: .standard(proto: "referrer_phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userPhone)
      case 2: try decoder.decodeSingularStringField(value: &self.userName)
      case 3: try decoder.decodeSingularStringField(value: &self.userNickname)
      case 4: try decoder.decodeSingularStringField(value: &self.userIcon)
      case 5: try decoder.decodeSingularStringField(value: &self.userPinyin)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.userGender)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.userWeight)
      case 8: try decoder.decodeSingularStringField(value: &self.userBirthday)
      case 9: try decoder.decodeSingularStringField(value: &self.userNativePlace)
      case 10: try decoder.decodeSingularStringField(value: &self.userAddr)
      case 11: try decoder.decodeSingularStringField(value: &self.accountID)
      case 12: try decoder.decodeSingularInt32Field(value: &self.userAge)
      case 13: try decoder.decodeSingularStringField(value: &self.residenceNumber)
      case 14: try decoder.decodeSingularStringField(value: &self.referrerName)
      case 15: try decoder.decodeSingularStringField(value: &self.referrerPhone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.userPhone, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if !self.userNickname.isEmpty {
      try visitor.visitSingularStringField(value: self.userNickname, fieldNumber: 3)
    }
    if !self.userIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.userIcon, fieldNumber: 4)
    }
    if !self.userPinyin.isEmpty {
      try visitor.visitSingularStringField(value: self.userPinyin, fieldNumber: 5)
    }
    if self.userGender != 0 {
      try visitor.visitSingularUInt32Field(value: self.userGender, fieldNumber: 6)
    }
    if self.userWeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.userWeight, fieldNumber: 7)
    }
    if !self.userBirthday.isEmpty {
      try visitor.visitSingularStringField(value: self.userBirthday, fieldNumber: 8)
    }
    if !self.userNativePlace.isEmpty {
      try visitor.visitSingularStringField(value: self.userNativePlace, fieldNumber: 9)
    }
    if !self.userAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.userAddr, fieldNumber: 10)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 11)
    }
    if self.userAge != 0 {
      try visitor.visitSingularInt32Field(value: self.userAge, fieldNumber: 12)
    }
    if !self.residenceNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.residenceNumber, fieldNumber: 13)
    }
    if !self.referrerName.isEmpty {
      try visitor.visitSingularStringField(value: self.referrerName, fieldNumber: 14)
    }
    if !self.referrerPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.referrerPhone, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UpdateUserInfoRequest, rhs: Protogo_UpdateUserInfoRequest) -> Bool {
    if lhs.userPhone != rhs.userPhone {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.userNickname != rhs.userNickname {return false}
    if lhs.userIcon != rhs.userIcon {return false}
    if lhs.userPinyin != rhs.userPinyin {return false}
    if lhs.userGender != rhs.userGender {return false}
    if lhs.userWeight != rhs.userWeight {return false}
    if lhs.userBirthday != rhs.userBirthday {return false}
    if lhs.userNativePlace != rhs.userNativePlace {return false}
    if lhs.userAddr != rhs.userAddr {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userAge != rhs.userAge {return false}
    if lhs.residenceNumber != rhs.residenceNumber {return false}
    if lhs.referrerName != rhs.referrerName {return false}
    if lhs.referrerPhone != rhs.referrerPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UpdateUserInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UpdateUserInfoResponse, rhs: Protogo_UpdateUserInfoResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
