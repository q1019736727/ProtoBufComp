// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: signin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///账号密码登录
///请求参数
struct Protogo_SigninRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///登录方式 1手机号验证码2手机号密码3微信登录
  var signinWay: Int32 = 0

  ///手机号或者微信code
  var account: String = String()

  ///验证码或者密码
  var password: String = String()

  ///设备id
  var deviceID: String = String()

  ///设备类型
  var deviceType: String = String()

  ///微信uuid
  var wechatUuid: String = String()

  ///登录来源，0:app登录 1:web登录
  var source: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_SigninResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_Signin {
    get {return _data ?? Protogo_Signin()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_Signin? = nil
}

struct Protogo_Signin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var token: String = String()

  var imAccid: String = String()

  var imToken: String = String()

  var wechatUuid: String = String()

  var userPhone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_SigninRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigninRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signin_way"),
    2: .same(proto: "account"),
    3: .same(proto: "password"),
    4: .standard(proto: "device_id"),
    5: .standard(proto: "device_type"),
    6: .standard(proto: "wechat_uuid"),
    7: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.signinWay)
      case 2: try decoder.decodeSingularStringField(value: &self.account)
      case 3: try decoder.decodeSingularStringField(value: &self.password)
      case 4: try decoder.decodeSingularStringField(value: &self.deviceID)
      case 5: try decoder.decodeSingularStringField(value: &self.deviceType)
      case 6: try decoder.decodeSingularStringField(value: &self.wechatUuid)
      case 7: try decoder.decodeSingularInt32Field(value: &self.source)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.signinWay != 0 {
      try visitor.visitSingularInt32Field(value: self.signinWay, fieldNumber: 1)
    }
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 4)
    }
    if !self.deviceType.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceType, fieldNumber: 5)
    }
    if !self.wechatUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.wechatUuid, fieldNumber: 6)
    }
    if self.source != 0 {
      try visitor.visitSingularInt32Field(value: self.source, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_SigninRequest, rhs: Protogo_SigninRequest) -> Bool {
    if lhs.signinWay != rhs.signinWay {return false}
    if lhs.account != rhs.account {return false}
    if lhs.password != rhs.password {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs.wechatUuid != rhs.wechatUuid {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_SigninResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigninResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_SigninResponse, rhs: Protogo_SigninResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_Signin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Signin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "token"),
    3: .standard(proto: "im_accid"),
    4: .standard(proto: "im_token"),
    5: .standard(proto: "wechat_uuid"),
    6: .standard(proto: "user_phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.token)
      case 3: try decoder.decodeSingularStringField(value: &self.imAccid)
      case 4: try decoder.decodeSingularStringField(value: &self.imToken)
      case 5: try decoder.decodeSingularStringField(value: &self.wechatUuid)
      case 6: try decoder.decodeSingularStringField(value: &self.userPhone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if !self.imAccid.isEmpty {
      try visitor.visitSingularStringField(value: self.imAccid, fieldNumber: 3)
    }
    if !self.imToken.isEmpty {
      try visitor.visitSingularStringField(value: self.imToken, fieldNumber: 4)
    }
    if !self.wechatUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.wechatUuid, fieldNumber: 5)
    }
    if !self.userPhone.isEmpty {
      try visitor.visitSingularStringField(value: self.userPhone, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_Signin, rhs: Protogo_Signin) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.token != rhs.token {return false}
    if lhs.imAccid != rhs.imAccid {return false}
    if lhs.imToken != rhs.imToken {return false}
    if lhs.wechatUuid != rhs.wechatUuid {return false}
    if lhs.userPhone != rhs.userPhone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
