// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_evaluate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///用户评价展示信息
///userevaluateinfo
struct Protogo_UserEvaluateInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  ///划扣记录id
  var deductionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_UserEvaluateInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_UserEvaluateInfo {
    get {return _data ?? Protogo_UserEvaluateInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_UserEvaluateInfo? = nil
}

struct Protogo_UserEvaluateInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tags: [Protogo_UserEvaluateTagAllInfo] = []

  var items: [Protogo_EvaluatedItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_UserEvaluateTagAllInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///好评度
  var satisfaction: Int32 = 0

  var tags: [Protogo_UserEvaluateTagInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_UserEvaluateTagInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tagID: Int32 = 0

  var tagName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///用户提交评价
///userevaluatecommit
struct Protogo_UserEvaluateCommitRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  var hospitalID: Int32 = 0

  ///项目划扣id
  var deductionID: String = String()

  ///评价内容
  var evaluates: [Protogo_UserEvaluateCommit] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_UserEvaluateCommit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var skuID: Int32 = 0

  ///项目id
  var itemID: String = String()

  ///用户满意度
  var satisfaction: Int32 = 0

  ///评价标签
  var tag: String = String()

  ///评价内容
  var evaluateContent: String = String()

  ///照片路径
  var itemPicturePath: String = String()

  ///视频路径
  var itemVideoPath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_UserEvaluateCommitResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///用户待评价列表
///usernotevaluated
struct Protogo_UserNotEvaluatedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_UserNotEvaluatedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_UserNotEvaluated] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_UserNotEvaluated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  ///医院名称
  var hospitalName: String = String()

  ///医院头像
  var hospitalLogo: String = String()

  ///项目划扣id
  var deductionID: String = String()

  ///服务时间
  var serviceTime: String = String()

  ///项目信息
  var items: [Protogo_EvaluatedItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///用户已评价列表
///userevaluateinfo
struct Protogo_UserEvaluatedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_UserEvaluatedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_UserEvaluated] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_UserEvaluated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  ///医院名称
  var hospitalName: String = String()

  ///医院头像路径
  var hospitalLogo: String = String()

  ///项目id
  var itemID: String = String()

  ///项目头像路径
  var itemPicture: String = String()

  ///项目名
  var itemName: String = String()

  ///分类类型 1:项目 2：产品
  var itemType: Int32 = 0

  ///规格名
  var skuName: String = String()

  ///满意度
  var satisfaction: Int32 = 0

  ///评价标签
  var tag: String = String()

  ///图片
  var itemPicturePath: String = String()

  ///视频
  var itemVideoPath: String = String()

  ///评价内容
  var evaluateContent: String = String()

  ///评价时间
  var evaluateTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_UserEvaluateInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "deduction_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.deductionID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.deductionID.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateInfoRequest, rhs: Protogo_UserEvaluateInfoRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.deductionID != rhs.deductionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateInfoResponse, rhs: Protogo_UserEvaluateInfoResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tags"),
    2: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateInfo, rhs: Protogo_UserEvaluateInfo) -> Bool {
    if lhs.tags != rhs.tags {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateTagAllInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateTagAllInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "satisfaction"),
    2: .same(proto: "tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.satisfaction)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tags)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.satisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.satisfaction, fieldNumber: 1)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateTagAllInfo, rhs: Protogo_UserEvaluateTagAllInfo) -> Bool {
    if lhs.satisfaction != rhs.satisfaction {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateTagInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateTagInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tag_id"),
    2: .standard(proto: "tag_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tagID)
      case 2: try decoder.decodeSingularStringField(value: &self.tagName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tagID != 0 {
      try visitor.visitSingularInt32Field(value: self.tagID, fieldNumber: 1)
    }
    if !self.tagName.isEmpty {
      try visitor.visitSingularStringField(value: self.tagName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateTagInfo, rhs: Protogo_UserEvaluateTagInfo) -> Bool {
    if lhs.tagID != rhs.tagID {return false}
    if lhs.tagName != rhs.tagName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateCommitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateCommitRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "hospital_id"),
    3: .standard(proto: "deduction_id"),
    4: .same(proto: "evaluates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 3: try decoder.decodeSingularStringField(value: &self.deductionID)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.evaluates)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 2)
    }
    if !self.deductionID.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionID, fieldNumber: 3)
    }
    if !self.evaluates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evaluates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateCommitRequest, rhs: Protogo_UserEvaluateCommitRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.deductionID != rhs.deductionID {return false}
    if lhs.evaluates != rhs.evaluates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateCommit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sku_id"),
    2: .standard(proto: "item_id"),
    3: .same(proto: "satisfaction"),
    4: .same(proto: "tag"),
    5: .standard(proto: "evaluate_content"),
    6: .standard(proto: "item_picture_path"),
    7: .standard(proto: "item_video_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.satisfaction)
      case 4: try decoder.decodeSingularStringField(value: &self.tag)
      case 5: try decoder.decodeSingularStringField(value: &self.evaluateContent)
      case 6: try decoder.decodeSingularStringField(value: &self.itemPicturePath)
      case 7: try decoder.decodeSingularStringField(value: &self.itemVideoPath)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 1)
    }
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 2)
    }
    if self.satisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.satisfaction, fieldNumber: 3)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 4)
    }
    if !self.evaluateContent.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluateContent, fieldNumber: 5)
    }
    if !self.itemPicturePath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicturePath, fieldNumber: 6)
    }
    if !self.itemVideoPath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemVideoPath, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateCommit, rhs: Protogo_UserEvaluateCommit) -> Bool {
    if lhs.skuID != rhs.skuID {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.satisfaction != rhs.satisfaction {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.evaluateContent != rhs.evaluateContent {return false}
    if lhs.itemPicturePath != rhs.itemPicturePath {return false}
    if lhs.itemVideoPath != rhs.itemVideoPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluateCommitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluateCommitResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluateCommitResponse, rhs: Protogo_UserEvaluateCommitResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserNotEvaluatedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserNotEvaluatedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserNotEvaluatedRequest, rhs: Protogo_UserNotEvaluatedRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserNotEvaluatedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserNotEvaluatedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserNotEvaluatedResponse, rhs: Protogo_UserNotEvaluatedResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserNotEvaluated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserNotEvaluated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_name"),
    3: .standard(proto: "hospital_logo"),
    4: .standard(proto: "deduction_id"),
    5: .standard(proto: "service_time"),
    6: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 4: try decoder.decodeSingularStringField(value: &self.deductionID)
      case 5: try decoder.decodeSingularStringField(value: &self.serviceTime)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 2)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 3)
    }
    if !self.deductionID.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionID, fieldNumber: 4)
    }
    if !self.serviceTime.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceTime, fieldNumber: 5)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserNotEvaluated, rhs: Protogo_UserNotEvaluated) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.deductionID != rhs.deductionID {return false}
    if lhs.serviceTime != rhs.serviceTime {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluatedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluatedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluatedRequest, rhs: Protogo_UserEvaluatedRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluatedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluatedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluatedResponse, rhs: Protogo_UserEvaluatedResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserEvaluated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserEvaluated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_name"),
    3: .standard(proto: "hospital_logo"),
    4: .standard(proto: "item_id"),
    5: .standard(proto: "item_picture"),
    6: .standard(proto: "item_name"),
    7: .standard(proto: "item_type"),
    8: .standard(proto: "sku_name"),
    9: .same(proto: "satisfaction"),
    10: .same(proto: "tag"),
    11: .standard(proto: "item_picture_path"),
    12: .standard(proto: "item_video_path"),
    13: .standard(proto: "evaluate_content"),
    14: .standard(proto: "evaluate_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 4: try decoder.decodeSingularStringField(value: &self.itemID)
      case 5: try decoder.decodeSingularStringField(value: &self.itemPicture)
      case 6: try decoder.decodeSingularStringField(value: &self.itemName)
      case 7: try decoder.decodeSingularInt32Field(value: &self.itemType)
      case 8: try decoder.decodeSingularStringField(value: &self.skuName)
      case 9: try decoder.decodeSingularInt32Field(value: &self.satisfaction)
      case 10: try decoder.decodeSingularStringField(value: &self.tag)
      case 11: try decoder.decodeSingularStringField(value: &self.itemPicturePath)
      case 12: try decoder.decodeSingularStringField(value: &self.itemVideoPath)
      case 13: try decoder.decodeSingularStringField(value: &self.evaluateContent)
      case 14: try decoder.decodeSingularStringField(value: &self.evaluateTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 2)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 3)
    }
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 4)
    }
    if !self.itemPicture.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicture, fieldNumber: 5)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 6)
    }
    if self.itemType != 0 {
      try visitor.visitSingularInt32Field(value: self.itemType, fieldNumber: 7)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 8)
    }
    if self.satisfaction != 0 {
      try visitor.visitSingularInt32Field(value: self.satisfaction, fieldNumber: 9)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 10)
    }
    if !self.itemPicturePath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicturePath, fieldNumber: 11)
    }
    if !self.itemVideoPath.isEmpty {
      try visitor.visitSingularStringField(value: self.itemVideoPath, fieldNumber: 12)
    }
    if !self.evaluateContent.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluateContent, fieldNumber: 13)
    }
    if !self.evaluateTime.isEmpty {
      try visitor.visitSingularStringField(value: self.evaluateTime, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserEvaluated, rhs: Protogo_UserEvaluated) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemPicture != rhs.itemPicture {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.itemType != rhs.itemType {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.satisfaction != rhs.satisfaction {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.itemPicturePath != rhs.itemPicturePath {return false}
    if lhs.itemVideoPath != rhs.itemVideoPath {return false}
    if lhs.evaluateContent != rhs.evaluateContent {return false}
    if lhs.evaluateTime != rhs.evaluateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
