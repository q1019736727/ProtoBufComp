// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_appoint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///////取消预约
struct Protogo_AppointCancelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var appointmentIndex: Int32 = 0

  ///取消预约类型 1-到院面诊，2-视频问诊，3-到院治疗
  var appointmentType: Int32 = 0

  var appointmentCancelReason: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_AppointCancelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///////用户预约未到店次数
struct Protogo_AppointNumberRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_AppointNumberResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///////用户预约记录
struct Protogo_AppointRecordsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_AppointRecordsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_AppointInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_AppointInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///预约记录id
  var appointmentIndex: Int32 = 0

  ///创建时间
  var createTime: String = String()

  ///预约时间
  var appointmentTime: String = String()

  ///预约类型 1-到院面诊，2-视频问诊，3-到院治疗
  var appointmentType: Int32 = 0

  ///预约流程状态 1-待上门/视频,2-已取消, 3-已上门
  var appointmentStep: Int32 = 0

  ///治疗项目
  var visitItem: String = String()

  ///医院logo path
  var hospitalLogo: String = String()

  ///医院名称
  var hospitalName: String = String()

  ///医院地址
  var hospitalAddr: String = String()

  ///医院电话
  var hospitalTel: String = String()

  ///医院坐标
  var hospitalCoordinate: String = String()

  ///医生名称
  var doctorName: String = String()

  ///医生logo path
  var doctorPhoto: String = String()

  ///医生性别
  var doctorGender: Int32 = 0

  ///医生im accid
  var imAccid: String = String()

  ///分诊时间
  var diagTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_AppointCancelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointCancelRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "appointment_index"),
    3: .standard(proto: "appointment_type"),
    4: .standard(proto: "appointment_cancel_reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.appointmentIndex)
      case 3: try decoder.decodeSingularInt32Field(value: &self.appointmentType)
      case 4: try decoder.decodeSingularInt32Field(value: &self.appointmentCancelReason)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if self.appointmentIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentIndex, fieldNumber: 2)
    }
    if self.appointmentType != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentType, fieldNumber: 3)
    }
    if self.appointmentCancelReason != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentCancelReason, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointCancelRequest, rhs: Protogo_AppointCancelRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.appointmentIndex != rhs.appointmentIndex {return false}
    if lhs.appointmentType != rhs.appointmentType {return false}
    if lhs.appointmentCancelReason != rhs.appointmentCancelReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointCancelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointCancelResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointCancelResponse, rhs: Protogo_AppointCancelResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointNumberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointNumberRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointNumberRequest, rhs: Protogo_AppointNumberRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointNumberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointNumberResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularInt32Field(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.data != 0 {
      try visitor.visitSingularInt32Field(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointNumberResponse, rhs: Protogo_AppointNumberResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointRecordsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointRecordsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointRecordsRequest, rhs: Protogo_AppointRecordsRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointRecordsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointRecordsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointRecordsResponse, rhs: Protogo_AppointRecordsResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_AppointInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppointInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "appointment_index"),
    2: .standard(proto: "create_time"),
    3: .standard(proto: "appointment_time"),
    4: .standard(proto: "appointment_type"),
    5: .standard(proto: "appointment_step"),
    6: .standard(proto: "visit_item"),
    7: .standard(proto: "hospital_logo"),
    8: .standard(proto: "hospital_name"),
    9: .standard(proto: "hospital_addr"),
    10: .standard(proto: "hospital_tel"),
    11: .standard(proto: "hospital_coordinate"),
    12: .standard(proto: "doctor_name"),
    13: .standard(proto: "doctor_photo"),
    14: .standard(proto: "doctor_gender"),
    15: .standard(proto: "im_accid"),
    16: .standard(proto: "diag_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.appointmentIndex)
      case 2: try decoder.decodeSingularStringField(value: &self.createTime)
      case 3: try decoder.decodeSingularStringField(value: &self.appointmentTime)
      case 4: try decoder.decodeSingularInt32Field(value: &self.appointmentType)
      case 5: try decoder.decodeSingularInt32Field(value: &self.appointmentStep)
      case 6: try decoder.decodeSingularStringField(value: &self.visitItem)
      case 7: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 8: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 9: try decoder.decodeSingularStringField(value: &self.hospitalAddr)
      case 10: try decoder.decodeSingularStringField(value: &self.hospitalTel)
      case 11: try decoder.decodeSingularStringField(value: &self.hospitalCoordinate)
      case 12: try decoder.decodeSingularStringField(value: &self.doctorName)
      case 13: try decoder.decodeSingularStringField(value: &self.doctorPhoto)
      case 14: try decoder.decodeSingularInt32Field(value: &self.doctorGender)
      case 15: try decoder.decodeSingularStringField(value: &self.imAccid)
      case 16: try decoder.decodeSingularStringField(value: &self.diagTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.appointmentIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentIndex, fieldNumber: 1)
    }
    if !self.createTime.isEmpty {
      try visitor.visitSingularStringField(value: self.createTime, fieldNumber: 2)
    }
    if !self.appointmentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.appointmentTime, fieldNumber: 3)
    }
    if self.appointmentType != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentType, fieldNumber: 4)
    }
    if self.appointmentStep != 0 {
      try visitor.visitSingularInt32Field(value: self.appointmentStep, fieldNumber: 5)
    }
    if !self.visitItem.isEmpty {
      try visitor.visitSingularStringField(value: self.visitItem, fieldNumber: 6)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 7)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 8)
    }
    if !self.hospitalAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddr, fieldNumber: 9)
    }
    if !self.hospitalTel.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalTel, fieldNumber: 10)
    }
    if !self.hospitalCoordinate.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalCoordinate, fieldNumber: 11)
    }
    if !self.doctorName.isEmpty {
      try visitor.visitSingularStringField(value: self.doctorName, fieldNumber: 12)
    }
    if !self.doctorPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.doctorPhoto, fieldNumber: 13)
    }
    if self.doctorGender != 0 {
      try visitor.visitSingularInt32Field(value: self.doctorGender, fieldNumber: 14)
    }
    if !self.imAccid.isEmpty {
      try visitor.visitSingularStringField(value: self.imAccid, fieldNumber: 15)
    }
    if !self.diagTime.isEmpty {
      try visitor.visitSingularStringField(value: self.diagTime, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_AppointInfo, rhs: Protogo_AppointInfo) -> Bool {
    if lhs.appointmentIndex != rhs.appointmentIndex {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.appointmentTime != rhs.appointmentTime {return false}
    if lhs.appointmentType != rhs.appointmentType {return false}
    if lhs.appointmentStep != rhs.appointmentStep {return false}
    if lhs.visitItem != rhs.visitItem {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalAddr != rhs.hospitalAddr {return false}
    if lhs.hospitalTel != rhs.hospitalTel {return false}
    if lhs.hospitalCoordinate != rhs.hospitalCoordinate {return false}
    if lhs.doctorName != rhs.doctorName {return false}
    if lhs.doctorPhoto != rhs.doctorPhoto {return false}
    if lhs.doctorGender != rhs.doctorGender {return false}
    if lhs.imAccid != rhs.imAccid {return false}
    if lhs.diagTime != rhs.diagTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
