// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_order.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///用户订单详情页面
///userorderdetail
struct Protogo_UserOrderDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  ///订单id
  var orderID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_UserOrderDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_UserOrderDetail {
    get {return _data ?? Protogo_UserOrderDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_UserOrderDetail? = nil
}

struct Protogo_UserOrderDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///医院名称
  var hospitalName: String = String()

  ///医院地址
  var hospitalAddr: String = String()

  ///医院经纬度
  var hospitalCoordinate: String = String()

  ///医院电话
  var hospitalTel: String = String()

  ///订单编号
  var orderID: String = String()

  ///下单时间
  var createTime: String = String()

  ///支付时间
  var payTime: String = String()

  ///订单取消、失效时间
  var cancelTime: String = String()

  ///订单最晚支付时间，只有待支付有值
  var latestPaytime: String = String()

  ///订单状态 1:待付款2:待消费3:已失效
  var orderStatus: Int32 = 0

  ///订单金额
  var orderAmount: Int32 = 0

  ///商品总金额
  var orderTotalAmount: Int32 = 0

  ///红包优惠金额
  var orderDiscounts: Int32 = 0

  ///实际支付金额
  var paidAmount: Int32 = 0

  ///待支付金额
  var unpaidAmount: Int32 = 0

  ///订单项目信息
  var items: [Protogo_UserOrderItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///用户订单记录
///userorderrecords
struct Protogo_UserOrderRecordsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  ///0:全部1:待付款2:已完成3:已失效
  var orderStatus: Int32 = 0

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_UserOrderRecordsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_UserOrderInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_UserOrderInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var hospitalLogo: String = String()

  var hospitalName: String = String()

  ///医院地址
  var hospitalAddr: String = String()

  ///医院经纬度
  var hospitalCoordinate: String = String()

  ///订单id
  var orderID: String = String()

  ///下单时间
  var createTime: String = String()

  ///订单状态 1:待付款2:已完成3:已失效
  var orderStatus: Int32 = 0

  ///订单总价
  var orderAmount: Int32 = 0

  ///订单优惠金额
  var orderDiscounts: Int32 = 0

  ///实际支付金额
  var paidAmount: Int32 = 0

  ///待支付金额
  var unpaidAmount: Int32 = 0

  ///订单最晚支付时间，只有待支付有值
  var latestPaytime: String = String()

  ///订单项目信息
  var items: [Protogo_UserOrderItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///我的项目待服务
///userordertoserved
struct Protogo_UserOrderToServedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_UserOrderToServedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_UserOrderToServed] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_UserOrderToServed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var hospitalLogo: String = String()

  var hospitalName: String = String()

  ///购买时间
  var buyTime: String = String()

  ///订单项目信息
  var items: [Protogo_UserOrderToServedItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_UserOrderToServedItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目图片路径
  var itemPicture: String = String()

  ///项目名
  var itemName: String = String()

  ///规格名
  var skuName: String = String()

  ///剩余数量
  var remainAmount: Int32 = 0

  ///划扣单位
  var deductionUnit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///我的项目已服务
///userorderserved
struct Protogo_UserOrderServedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_UserOrderServedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_UserOrderServed] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_UserOrderServed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var hospitalLogo: String = String()

  var hospitalName: String = String()

  ///服务时间
  var servedTime: String = String()

  ///划扣记录id
  var deductionID: String = String()

  ///是否已评价 1:未评价 2:已评价
  var isEvaluate: Int32 = 0

  ///订单项目信息
  var items: [Protogo_UserOrderServedItemInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_UserOrderServedItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///项目图片路径
  var itemPicture: String = String()

  ///项目名
  var itemName: String = String()

  ///规格名
  var skuName: String = String()

  ///划扣数量
  var deductionAmount: Int32 = 0

  ///划扣单位
  var deductionUnit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_UserOrderDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderDetailRequest, rhs: Protogo_UserOrderDetailRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderDetailResponse, rhs: Protogo_UserOrderDetailResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_name"),
    2: .standard(proto: "hospital_addr"),
    3: .standard(proto: "hospital_coordinate"),
    4: .standard(proto: "hospital_tel"),
    5: .standard(proto: "order_id"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "pay_time"),
    8: .standard(proto: "cancel_time"),
    9: .standard(proto: "latest_paytime"),
    10: .standard(proto: "order_status"),
    11: .standard(proto: "order_amount"),
    12: .standard(proto: "order_total_amount"),
    13: .standard(proto: "order_discounts"),
    14: .standard(proto: "paid_amount"),
    15: .standard(proto: "unpaid_amount"),
    16: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalAddr)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalCoordinate)
      case 4: try decoder.decodeSingularStringField(value: &self.hospitalTel)
      case 5: try decoder.decodeSingularStringField(value: &self.orderID)
      case 6: try decoder.decodeSingularStringField(value: &self.createTime)
      case 7: try decoder.decodeSingularStringField(value: &self.payTime)
      case 8: try decoder.decodeSingularStringField(value: &self.cancelTime)
      case 9: try decoder.decodeSingularStringField(value: &self.latestPaytime)
      case 10: try decoder.decodeSingularInt32Field(value: &self.orderStatus)
      case 11: try decoder.decodeSingularInt32Field(value: &self.orderAmount)
      case 12: try decoder.decodeSingularInt32Field(value: &self.orderTotalAmount)
      case 13: try decoder.decodeSingularInt32Field(value: &self.orderDiscounts)
      case 14: try decoder.decodeSingularInt32Field(value: &self.paidAmount)
      case 15: try decoder.decodeSingularInt32Field(value: &self.unpaidAmount)
      case 16: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 1)
    }
    if !self.hospitalAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddr, fieldNumber: 2)
    }
    if !self.hospitalCoordinate.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalCoordinate, fieldNumber: 3)
    }
    if !self.hospitalTel.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalTel, fieldNumber: 4)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 5)
    }
    if !self.createTime.isEmpty {
      try visitor.visitSingularStringField(value: self.createTime, fieldNumber: 6)
    }
    if !self.payTime.isEmpty {
      try visitor.visitSingularStringField(value: self.payTime, fieldNumber: 7)
    }
    if !self.cancelTime.isEmpty {
      try visitor.visitSingularStringField(value: self.cancelTime, fieldNumber: 8)
    }
    if !self.latestPaytime.isEmpty {
      try visitor.visitSingularStringField(value: self.latestPaytime, fieldNumber: 9)
    }
    if self.orderStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.orderStatus, fieldNumber: 10)
    }
    if self.orderAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.orderAmount, fieldNumber: 11)
    }
    if self.orderTotalAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.orderTotalAmount, fieldNumber: 12)
    }
    if self.orderDiscounts != 0 {
      try visitor.visitSingularInt32Field(value: self.orderDiscounts, fieldNumber: 13)
    }
    if self.paidAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.paidAmount, fieldNumber: 14)
    }
    if self.unpaidAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.unpaidAmount, fieldNumber: 15)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderDetail, rhs: Protogo_UserOrderDetail) -> Bool {
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalAddr != rhs.hospitalAddr {return false}
    if lhs.hospitalCoordinate != rhs.hospitalCoordinate {return false}
    if lhs.hospitalTel != rhs.hospitalTel {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.payTime != rhs.payTime {return false}
    if lhs.cancelTime != rhs.cancelTime {return false}
    if lhs.latestPaytime != rhs.latestPaytime {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.orderTotalAmount != rhs.orderTotalAmount {return false}
    if lhs.orderDiscounts != rhs.orderDiscounts {return false}
    if lhs.paidAmount != rhs.paidAmount {return false}
    if lhs.unpaidAmount != rhs.unpaidAmount {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderRecordsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderRecordsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "order_status"),
    3: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.orderStatus)
      case 3: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if self.orderStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.orderStatus, fieldNumber: 2)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderRecordsRequest, rhs: Protogo_UserOrderRecordsRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderRecordsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderRecordsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderRecordsResponse, rhs: Protogo_UserOrderRecordsResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_logo"),
    3: .standard(proto: "hospital_name"),
    4: .standard(proto: "hospital_addr"),
    5: .standard(proto: "hospital_coordinate"),
    6: .standard(proto: "order_id"),
    7: .standard(proto: "create_time"),
    8: .standard(proto: "order_status"),
    9: .standard(proto: "order_amount"),
    10: .standard(proto: "order_discounts"),
    11: .standard(proto: "paid_amount"),
    12: .standard(proto: "unpaid_amount"),
    13: .standard(proto: "latest_paytime"),
    14: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 4: try decoder.decodeSingularStringField(value: &self.hospitalAddr)
      case 5: try decoder.decodeSingularStringField(value: &self.hospitalCoordinate)
      case 6: try decoder.decodeSingularStringField(value: &self.orderID)
      case 7: try decoder.decodeSingularStringField(value: &self.createTime)
      case 8: try decoder.decodeSingularInt32Field(value: &self.orderStatus)
      case 9: try decoder.decodeSingularInt32Field(value: &self.orderAmount)
      case 10: try decoder.decodeSingularInt32Field(value: &self.orderDiscounts)
      case 11: try decoder.decodeSingularInt32Field(value: &self.paidAmount)
      case 12: try decoder.decodeSingularInt32Field(value: &self.unpaidAmount)
      case 13: try decoder.decodeSingularStringField(value: &self.latestPaytime)
      case 14: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 2)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 3)
    }
    if !self.hospitalAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddr, fieldNumber: 4)
    }
    if !self.hospitalCoordinate.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalCoordinate, fieldNumber: 5)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 6)
    }
    if !self.createTime.isEmpty {
      try visitor.visitSingularStringField(value: self.createTime, fieldNumber: 7)
    }
    if self.orderStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.orderStatus, fieldNumber: 8)
    }
    if self.orderAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.orderAmount, fieldNumber: 9)
    }
    if self.orderDiscounts != 0 {
      try visitor.visitSingularInt32Field(value: self.orderDiscounts, fieldNumber: 10)
    }
    if self.paidAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.paidAmount, fieldNumber: 11)
    }
    if self.unpaidAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.unpaidAmount, fieldNumber: 12)
    }
    if !self.latestPaytime.isEmpty {
      try visitor.visitSingularStringField(value: self.latestPaytime, fieldNumber: 13)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderInfo, rhs: Protogo_UserOrderInfo) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalAddr != rhs.hospitalAddr {return false}
    if lhs.hospitalCoordinate != rhs.hospitalCoordinate {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.orderStatus != rhs.orderStatus {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.orderDiscounts != rhs.orderDiscounts {return false}
    if lhs.paidAmount != rhs.paidAmount {return false}
    if lhs.unpaidAmount != rhs.unpaidAmount {return false}
    if lhs.latestPaytime != rhs.latestPaytime {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderToServedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderToServedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderToServedRequest, rhs: Protogo_UserOrderToServedRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderToServedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderToServedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderToServedResponse, rhs: Protogo_UserOrderToServedResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderToServed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderToServed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_logo"),
    3: .standard(proto: "hospital_name"),
    4: .standard(proto: "buy_time"),
    5: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 4: try decoder.decodeSingularStringField(value: &self.buyTime)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 2)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 3)
    }
    if !self.buyTime.isEmpty {
      try visitor.visitSingularStringField(value: self.buyTime, fieldNumber: 4)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderToServed, rhs: Protogo_UserOrderToServed) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.buyTime != rhs.buyTime {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderToServedItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderToServedItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_picture"),
    2: .standard(proto: "item_name"),
    3: .standard(proto: "sku_name"),
    4: .standard(proto: "remain_amount"),
    5: .standard(proto: "deduction_unit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemPicture)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularStringField(value: &self.skuName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.remainAmount)
      case 5: try decoder.decodeSingularStringField(value: &self.deductionUnit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemPicture.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicture, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 3)
    }
    if self.remainAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.remainAmount, fieldNumber: 4)
    }
    if !self.deductionUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionUnit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderToServedItemInfo, rhs: Protogo_UserOrderToServedItemInfo) -> Bool {
    if lhs.itemPicture != rhs.itemPicture {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.remainAmount != rhs.remainAmount {return false}
    if lhs.deductionUnit != rhs.deductionUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderServedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderServedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderServedRequest, rhs: Protogo_UserOrderServedRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderServedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderServedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderServedResponse, rhs: Protogo_UserOrderServedResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderServed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderServed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_logo"),
    3: .standard(proto: "hospital_name"),
    4: .standard(proto: "served_time"),
    5: .standard(proto: "deduction_id"),
    6: .standard(proto: "is_evaluate"),
    7: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalLogo)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 4: try decoder.decodeSingularStringField(value: &self.servedTime)
      case 5: try decoder.decodeSingularStringField(value: &self.deductionID)
      case 6: try decoder.decodeSingularInt32Field(value: &self.isEvaluate)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalLogo.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalLogo, fieldNumber: 2)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 3)
    }
    if !self.servedTime.isEmpty {
      try visitor.visitSingularStringField(value: self.servedTime, fieldNumber: 4)
    }
    if !self.deductionID.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionID, fieldNumber: 5)
    }
    if self.isEvaluate != 0 {
      try visitor.visitSingularInt32Field(value: self.isEvaluate, fieldNumber: 6)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderServed, rhs: Protogo_UserOrderServed) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalLogo != rhs.hospitalLogo {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.servedTime != rhs.servedTime {return false}
    if lhs.deductionID != rhs.deductionID {return false}
    if lhs.isEvaluate != rhs.isEvaluate {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_UserOrderServedItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserOrderServedItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_picture"),
    2: .standard(proto: "item_name"),
    3: .standard(proto: "sku_name"),
    4: .standard(proto: "deduction_amount"),
    5: .standard(proto: "deduction_unit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemPicture)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularStringField(value: &self.skuName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.deductionAmount)
      case 5: try decoder.decodeSingularStringField(value: &self.deductionUnit)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemPicture.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPicture, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 3)
    }
    if self.deductionAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.deductionAmount, fieldNumber: 4)
    }
    if !self.deductionUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.deductionUnit, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_UserOrderServedItemInfo, rhs: Protogo_UserOrderServedItemInfo) -> Bool {
    if lhs.itemPicture != rhs.itemPicture {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.deductionAmount != rhs.deductionAmount {return false}
    if lhs.deductionUnit != rhs.deductionUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
