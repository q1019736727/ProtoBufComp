// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wiki.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 项目百科信息
struct Protogo_WikiItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 百科项目id
  var wikiItemID: String {
    get {return _storage._wikiItemID}
    set {_uniqueStorage()._wikiItemID = newValue}
  }

  /// 项目分类
  var itemKind: String {
    get {return _storage._itemKind}
    set {_uniqueStorage()._itemKind = newValue}
  }

  /// 效果图片
  var pics: String {
    get {return _storage._pics}
    set {_uniqueStorage()._pics = newValue}
  }

  /// 操作视频，逗号分割
  var opVideos: String {
    get {return _storage._opVideos}
    set {_uniqueStorage()._opVideos = newValue}
  }

  ///  医学原理
  var theory: String {
    get {return _storage._theory}
    set {_uniqueStorage()._theory = newValue}
  }

  /// 别名，逗号分割
  var alias: String {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  ///  安全度
  var safety: Int32 {
    get {return _storage._safety}
    set {_uniqueStorage()._safety = newValue}
  }

  /// 复杂度
  var complexity: Int32 {
    get {return _storage._complexity}
    set {_uniqueStorage()._complexity = newValue}
  }

  ///  疼痛度
  var pain: Int32 {
    get {return _storage._pain}
    set {_uniqueStorage()._pain = newValue}
  }

  ///  使用人群
  var users: String {
    get {return _storage._users}
    set {_uniqueStorage()._users = newValue}
  }

  ///  优点
  var strongPoint: String {
    get {return _storage._strongPoint}
    set {_uniqueStorage()._strongPoint = newValue}
  }

  ///  缺点
  var weakPoint: String {
    get {return _storage._weakPoint}
    set {_uniqueStorage()._weakPoint = newValue}
  }

  ///  禁忌人群
  var contraindications: String {
    get {return _storage._contraindications}
    set {_uniqueStorage()._contraindications = newValue}
  }

  ///  操作时长
  var opTime: String {
    get {return _storage._opTime}
    set {_uniqueStorage()._opTime = newValue}
  }

  ///  维持时长
  var continuativeTime: String {
    get {return _storage._continuativeTime}
    set {_uniqueStorage()._continuativeTime = newValue}
  }

  ///  麻醉方式 
  var anesthesiaMode: String {
    get {return _storage._anesthesiaMode}
    set {_uniqueStorage()._anesthesiaMode = newValue}
  }

  ///  恢复周期
  var recoveryPeriod: String {
    get {return _storage._recoveryPeriod}
    set {_uniqueStorage()._recoveryPeriod = newValue}
  }

  ///  治疗周期
  var treatPeriod: String {
    get {return _storage._treatPeriod}
    set {_uniqueStorage()._treatPeriod = newValue}
  }

  ///  治疗人员资质
  var qualification: String {
    get {return _storage._qualification}
    set {_uniqueStorage()._qualification = newValue}
  }

  ///  治疗方式 
  var treatMode: String {
    get {return _storage._treatMode}
    set {_uniqueStorage()._treatMode = newValue}
  }

  ///  术前准备 
  var preparation: String {
    get {return _storage._preparation}
    set {_uniqueStorage()._preparation = newValue}
  }

  /// 项目名
  var wikiItemName: String {
    get {return _storage._wikiItemName}
    set {_uniqueStorage()._wikiItemName = newValue}
  }

  /// 术后恢复
  var recoverStage: [Protogo_PostRecoverStageItem] {
    get {return _storage._recoverStage}
    set {_uniqueStorage()._recoverStage = newValue}
  }

  /// 仪器信息
  var instruments: [Protogo_WikiInstrumentInfo] {
    get {return _storage._instruments}
    set {_uniqueStorage()._instruments = newValue}
  }

  /// 相近项目信息
  var likeItems: [Protogo_WikiItemInfo] {
    get {return _storage._likeItems}
    set {_uniqueStorage()._likeItems = newValue}
  }

  /// 功效信息
  var effects: [Protogo_WikiEffectInfo] {
    get {return _storage._effects}
    set {_uniqueStorage()._effects = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 术后恢复信息
struct Protogo_PostRecoverStageItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  阶段名称
  var name: String = String()

  ///  天数
  var days: String = String()

  ///  恢复提示
  var recoverTip: String = String()

  ///  护理方法
  var nursingMethods: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiItemList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 项目id
  var itemID: String = String()

  /// 百科项目名
  var itemName: String = String()

  /// 项目层级
  var level: Int32 = 0

  /// 项目百科信息
  var itemInfo: [Protogo_WikiItemInfo] = []

  var itemList: [Protogo_WikiItemList] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取项目百科列表
/// /aist/app/wiki/getitemlist
struct Protogo_WikiGetItemListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 二级项目id
  var itemKindID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_WikiGetItemListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiItemInfo] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取项目百科详情
/// /aist/app/wiki/getitem
struct Protogo_WikiGetItemRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 百科项目id
  var wikiItemID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetItemResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_WikiItemInfo {
    get {return _data ?? Protogo_WikiItemInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_WikiItemInfo? = nil
}

/// 仪器/材料信息
struct Protogo_WikiInstrumentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 仪器百科id
  var wikiInstrumentID: String {
    get {return _storage._wikiInstrumentID}
    set {_uniqueStorage()._wikiInstrumentID = newValue}
  }

  /// 仪器名称
  var instrumentName: String {
    get {return _storage._instrumentName}
    set {_uniqueStorage()._instrumentName = newValue}
  }

  /// 分类id
  var classID: String {
    get {return _storage._classID}
    set {_uniqueStorage()._classID = newValue}
  }

  /// 仪器图片，逗号分割
  var pics: String {
    get {return _storage._pics}
    set {_uniqueStorage()._pics = newValue}
  }

  /// 操作视频，逗号分割
  var opVideos: String {
    get {return _storage._opVideos}
    set {_uniqueStorage()._opVideos = newValue}
  }

  /// 仪器简介
  var instrumentDesc: String {
    get {return _storage._instrumentDesc}
    set {_uniqueStorage()._instrumentDesc = newValue}
  }

  /// 仪器别名，逗号分割 
  var alias: String {
    get {return _storage._alias}
    set {_uniqueStorage()._alias = newValue}
  }

  ///  仪器特色
  var characteristic: String {
    get {return _storage._characteristic}
    set {_uniqueStorage()._characteristic = newValue}
  }

  ///  使用范围
  var availableRange: String {
    get {return _storage._availableRange}
    set {_uniqueStorage()._availableRange = newValue}
  }

  /// 1-材料，2-仪器
  var instrumentType: Int32 {
    get {return _storage._instrumentType}
    set {_uniqueStorage()._instrumentType = newValue}
  }

  /// 产地 
  var place: String {
    get {return _storage._place}
    set {_uniqueStorage()._place = newValue}
  }

  /// 厂家 
  var factory: String {
    get {return _storage._factory}
    set {_uniqueStorage()._factory = newValue}
  }

  ///  上市时间 
  var ttm: String {
    get {return _storage._ttm}
    set {_uniqueStorage()._ttm = newValue}
  }

  /// 优点 
  var strongPoint: String {
    get {return _storage._strongPoint}
    set {_uniqueStorage()._strongPoint = newValue}
  }

  /// 缺点 
  var weakPoint: String {
    get {return _storage._weakPoint}
    set {_uniqueStorage()._weakPoint = newValue}
  }

  /// 原理 
  var theory: String {
    get {return _storage._theory}
    set {_uniqueStorage()._theory = newValue}
  }

  ///  操作方式 
  var opMode: String {
    get {return _storage._opMode}
    set {_uniqueStorage()._opMode = newValue}
  }

  ///  治疗时长 
  var treatTime: String {
    get {return _storage._treatTime}
    set {_uniqueStorage()._treatTime = newValue}
  }

  ///  麻醉方式 
  var anesthesiaMode: String {
    get {return _storage._anesthesiaMode}
    set {_uniqueStorage()._anesthesiaMode = newValue}
  }

  ///  恢复时间 
  var recoveryTime: String {
    get {return _storage._recoveryTime}
    set {_uniqueStorage()._recoveryTime = newValue}
  }

  ///  治疗周期 
  var treatPeriod: String {
    get {return _storage._treatPeriod}
    set {_uniqueStorage()._treatPeriod = newValue}
  }

  ///  效果持续 
  var continuativeEffect: String {
    get {return _storage._continuativeEffect}
    set {_uniqueStorage()._continuativeEffect = newValue}
  }

  ///  治疗人员资质 
  var qualification: String {
    get {return _storage._qualification}
    set {_uniqueStorage()._qualification = newValue}
  }

  ///  术后反应 
  var reaction: String {
    get {return _storage._reaction}
    set {_uniqueStorage()._reaction = newValue}
  }

  ///  安全提示 
  var safetyTip: String {
    get {return _storage._safetyTip}
    set {_uniqueStorage()._safetyTip = newValue}
  }

  ///  辨识说明 
  var distinguishNotes: String {
    get {return _storage._distinguishNotes}
    set {_uniqueStorage()._distinguishNotes = newValue}
  }

  ///  辨识图片 
  var distinguishPics: String {
    get {return _storage._distinguishPics}
    set {_uniqueStorage()._distinguishPics = newValue}
  }

  ///  防伪链接 
  var link: String {
    get {return _storage._link}
    set {_uniqueStorage()._link = newValue}
  }

  /// nmp认证时间
  var nmp: String {
    get {return _storage._nmp}
    set {_uniqueStorage()._nmp = newValue}
  }

  /// 相似仪器
  var likeInstrument: [Protogo_WikiInstrumentInfo] {
    get {return _storage._likeInstrument}
    set {_uniqueStorage()._likeInstrument = newValue}
  }

  /// 适用项目信息
  var applyItems: [Protogo_WikiItemInfo] {
    get {return _storage._applyItems}
    set {_uniqueStorage()._applyItems = newValue}
  }

  /// 功效信息
  var effects: [Protogo_WikiEffectInfo] {
    get {return _storage._effects}
    set {_uniqueStorage()._effects = newValue}
  }

  /// 仪器/材料参数信息
  var params: [Protogo_PostInstrumentParams] {
    get {return _storage._params}
    set {_uniqueStorage()._params = newValue}
  }

  /// 品牌信息
  var brand: Protogo_WikiBrandInfo {
    get {return _storage._brand ?? Protogo_WikiBrandInfo()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  mutating func clearBrand() {_uniqueStorage()._brand = nil}

  /// 认证信息
  var certifications: [Protogo_PostInstrumentCertification] {
    get {return _storage._certifications}
    set {_uniqueStorage()._certifications = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 仪器/材料列表信息
struct Protogo_WikiInstrumentListInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 仪器百科id
  var wikiInstrumentID: String = String()

  /// 仪器名称
  var instrumentName: String = String()

  /// 分类id
  var classID: String = String()

  /// 分类名称
  var className: String = String()

  /// 品牌id
  var brand: String = String()

  /// 品牌名
  var brandName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 材料关联参数信息
struct Protogo_PostInstrumentParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 参数id
  var paramID: Int32 = 0

  /// 参数名，逗号分割
  var paramName: String = String()

  /// 参数值，逗号分割
  var paramValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 材料关联认证信息
struct Protogo_PostInstrumentCertification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 认证id
  var certificationID: Int32 = 0

  /// 图片，逗号分割
  var pics: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取百科仪器/材料列表
/// /aist/app/getinstrumentlist
struct Protogo_WikiGetInstrumentListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 仪器/材料名称
  var instrumentName: String = String()

  /// 仪器/材料分类id
  var classID: String = String()

  /// 1-材料，2-仪器
  var instrumentType: Int32 = 0

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_WikiGetInstrumentListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiInstrumentListInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取百科仪器/材料详情
/// /aist/app/getinstrument
struct Protogo_WikiGetInstrumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 仪器/材料id
  var wikiInstrumentID: String = String()

  /// 1-材料，2-仪器
  var instrumentType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetInstrumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_WikiInstrumentInfo {
    get {return _data ?? Protogo_WikiInstrumentInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_WikiInstrumentInfo? = nil
}

/// 仪器/材料分类信息
struct Protogo_WikiStrumentClassInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 分类id
  var instrumentClassID: String = String()

  /// 分类名称
  var instrumentClassName: String = String()

  /// 分类类型  1-材料，2-仪器
  var category: Int32 = 0

  /// 材料/仪器百科
  var instruments: [Protogo_WikiInstrumentInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取仪器/材料分类列表
/// /aist/app/wiki/getinstrumentclasslist
struct Protogo_WikiGetStrumentClassListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 1-材料，2-仪器
  var category: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetStrumentClassListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiStrumentClassInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取仪器/材料分类
/// /aist/app/wiki/getinstrumentclass
struct Protogo_WikiGetStrumentClassRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 参数id
  var instrumentClassID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetStrumentClassResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_WikiStrumentClassInfo {
    get {return _data ?? Protogo_WikiStrumentClassInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_WikiStrumentClassInfo? = nil
}

/// 百科参数
struct Protogo_WikiParamInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 参数id
  var wikiParamID: Int32 = 0

  /// 参数名
  var paramName: String = String()

  /// 参数所属  1-材料，2-仪器，3-材料和仪器
  var belong: Int32 = 0

  /// 参数所属名称
  var belongName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 百科功效信息
struct Protogo_WikiEffectInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///   功效id
  var wikiEffectID: Int32 = 0

  /// 功效名称
  var wikiEffectName: String = String()

  ///   功效描述
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 百科品牌信息
struct Protogo_WikiBrandInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///   品牌id
  var wikiBrandID: Int32 = 0

  ///   品牌名
  var wikiBrandName: String = String()

  ///   品牌logo
  var logo: String = String()

  ///   所属公司名称
  var company: String = String()

  ///   上市时间
  var ttm: String = String()

  /// 品牌简介
  var introduction: String = String()

  var ltsNstrument: [Protogo_WikiInstrumentInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取百科品牌
/// /aist/app/wiki/getbrand
struct Protogo_WikiGetBrandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 品牌id
  var wikiBrandID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetBrandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_WikiBrandInfo {
    get {return _data ?? Protogo_WikiBrandInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_WikiBrandInfo? = nil
}

/// 真人案例信息
struct Protogo_WikiRealCaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///   案例id
  var realCaseID: String = String()

  ///   案例名
  var realCaseName: String = String()

  ///   案例分类id
  var classID: String = String()

  ///   案例分类名
  var className: String = String()

  /// 术前照
  var preoperativePic: String = String()

  /// 术后照
  var postoperativePic: String = String()

  /// 详细描述
  var description_p: String = String()

  /// 关联百科项目
  var wikiItems: [Protogo_WikiItemInfo] = []

  /// 主导医生信息
  var medicaler: Protogo_WikiMedicalerInfo {
    get {return _medicaler ?? Protogo_WikiMedicalerInfo()}
    set {_medicaler = newValue}
  }
  /// Returns true if `medicaler` has been explicitly set.
  var hasMedicaler: Bool {return self._medicaler != nil}
  /// Clears the value of `medicaler`. Subsequent reads from it will return its default value.
  mutating func clearMedicaler() {self._medicaler = nil}

  /// 机构信息
  var hospital: Protogo_WikiHoispitalInfo {
    get {return _hospital ?? Protogo_WikiHoispitalInfo()}
    set {_hospital = newValue}
  }
  /// Returns true if `hospital` has been explicitly set.
  var hasHospital: Bool {return self._hospital != nil}
  /// Clears the value of `hospital`. Subsequent reads from it will return its default value.
  mutating func clearHospital() {self._hospital = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _medicaler: Protogo_WikiMedicalerInfo? = nil
  fileprivate var _hospital: Protogo_WikiHoispitalInfo? = nil
}

/// 案例医生信息
struct Protogo_WikiMedicalerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalerID: String = String()

  /// 医生姓名
  var medicalerName: String = String()

  /// 医生照片
  var medicalerPhoto: String = String()

  /// 职位
  var roleName: String = String()

  /// 接诊案例数 
  var realCaseNum: Int32 = 0

  /// 擅长项目
  var expertIn: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 机构信息
struct Protogo_WikiHoispitalInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 医院id
  var hospitalID: String = String()

  /// 医院name
  var hospitalName: String = String()

  /// 医院照片
  var hospitalPhoto: String = String()

  /// 医院地址
  var hospitalAddr: String = String()

  /// 医院经纬度
  var hospitalCoordinate: String = String()

  /// 接诊案例数 
  var realCaseNum: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取真人案例列表
/// /aist/app/wiki/realcaselist
struct Protogo_WikiGetRealCaseListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 案例分类id
  var classID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_WikiGetRealCaseListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiRealCaseInfo] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取真人案例
/// /aist/app/wiki/getrealcase
struct Protogo_WikiGetRealCaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 案例id
  var realCaseID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetRealCaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_WikiRealCaseInfo {
    get {return _data ?? Protogo_WikiRealCaseInfo()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_WikiRealCaseInfo? = nil
}

/// 案例分类信息
struct Protogo_WikiRealCaseClassInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///   案例分类id
  var classID: String = String()

  ///   案例分类名
  var className: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取案例分类列表
/// /aist/app/wiki/realcaseclasslist
struct Protogo_WikiGetRealCaseClassListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_WikiGetRealCaseClassListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiRealCaseClassInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 医生主页信息
struct Protogo_MedicalerHomepage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalerID: String = String()

  /// 医生姓名
  var medicalerName: String = String()

  /// 医生照片
  var medicalerPhoto: String = String()

  /// 职位
  var roleName: String = String()

  /// 从业年长
  var careeryear: String = String()

  /// 擅长项目
  var expertIn: String = String()

  ///  0-普通医生，1-集团专家
  var medicalerType: Int32 = 0

  /// 医生评分
  var score: Int32 = 0

  /// 医生简介
  var desc: String = String()

  /// 真人案例数
  var realCaseNum: Int32 = 0

  /// 关联项目数
  var itemNum: Int32 = 0

  /// 机构信息
  var hospitals: [Protogo_WikiHoispitalInfo] = []

  /// 医生关联真人案例
  var realCases: [Protogo_WikiRealCaseInfo] = []

  /// 医生关联项目
  var items: [Protogo_ItemBaseInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取医生主页信息
/// /aist/app/wiki/medicalerhomepage
struct Protogo_MedicalerHomepageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_MedicalerHomepageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_MedicalerHomepage {
    get {return _data ?? Protogo_MedicalerHomepage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_MedicalerHomepage? = nil
}

/// 获取医生项目信息
/// /aist/app/wiki/medicaleritemlist
struct Protogo_MedicalerItemListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalerID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_MedicalerItemListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_ItemBaseInfo] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取医生真人案例信息
/// /aist/app/wiki/medicalerrealcaselist
struct Protogo_MedicalerRealCaseListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var medicalerID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_MedicalerRealCaseListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiRealCaseInfo] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取百科项目相关案例
/// /aist/app/wiki/itemrealcaselist
struct Protogo_WikiItemRealCaseListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wikeItemID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_WikiItemRealCaseListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_WikiRealCaseInfo] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取百科项目推荐医生
/// /aist/app/wiki/itemmedicalerrecommend
struct Protogo_WikiItemMedicalerRecommendRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wikeItemID: String = String()

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  /// 排序字段  1-创建时间升序，2创建时间降序 3-更新时间升序，4-更新时间降序
  var sortType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

struct Protogo_WikiItemMedicalerRecommendResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_MedicalerHomepage] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_WikiItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_item_id"),
    2: .standard(proto: "item_kind"),
    3: .same(proto: "pics"),
    4: .standard(proto: "op_videos"),
    5: .same(proto: "theory"),
    6: .same(proto: "alias"),
    7: .same(proto: "safety"),
    8: .same(proto: "complexity"),
    9: .same(proto: "pain"),
    10: .same(proto: "users"),
    11: .standard(proto: "strong_point"),
    12: .standard(proto: "weak_point"),
    13: .same(proto: "contraindications"),
    14: .standard(proto: "op_time"),
    15: .standard(proto: "continuative_time"),
    16: .standard(proto: "anesthesia_mode"),
    17: .standard(proto: "recovery_period"),
    18: .standard(proto: "treat_period"),
    19: .same(proto: "qualification"),
    20: .standard(proto: "treat_mode"),
    21: .same(proto: "preparation"),
    22: .standard(proto: "wiki_item_name"),
    26: .standard(proto: "recover_stage"),
    27: .same(proto: "instruments"),
    28: .standard(proto: "like_items"),
    29: .same(proto: "effects"),
  ]

  fileprivate class _StorageClass {
    var _wikiItemID: String = String()
    var _itemKind: String = String()
    var _pics: String = String()
    var _opVideos: String = String()
    var _theory: String = String()
    var _alias: String = String()
    var _safety: Int32 = 0
    var _complexity: Int32 = 0
    var _pain: Int32 = 0
    var _users: String = String()
    var _strongPoint: String = String()
    var _weakPoint: String = String()
    var _contraindications: String = String()
    var _opTime: String = String()
    var _continuativeTime: String = String()
    var _anesthesiaMode: String = String()
    var _recoveryPeriod: String = String()
    var _treatPeriod: String = String()
    var _qualification: String = String()
    var _treatMode: String = String()
    var _preparation: String = String()
    var _wikiItemName: String = String()
    var _recoverStage: [Protogo_PostRecoverStageItem] = []
    var _instruments: [Protogo_WikiInstrumentInfo] = []
    var _likeItems: [Protogo_WikiItemInfo] = []
    var _effects: [Protogo_WikiEffectInfo] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _wikiItemID = source._wikiItemID
      _itemKind = source._itemKind
      _pics = source._pics
      _opVideos = source._opVideos
      _theory = source._theory
      _alias = source._alias
      _safety = source._safety
      _complexity = source._complexity
      _pain = source._pain
      _users = source._users
      _strongPoint = source._strongPoint
      _weakPoint = source._weakPoint
      _contraindications = source._contraindications
      _opTime = source._opTime
      _continuativeTime = source._continuativeTime
      _anesthesiaMode = source._anesthesiaMode
      _recoveryPeriod = source._recoveryPeriod
      _treatPeriod = source._treatPeriod
      _qualification = source._qualification
      _treatMode = source._treatMode
      _preparation = source._preparation
      _wikiItemName = source._wikiItemName
      _recoverStage = source._recoverStage
      _instruments = source._instruments
      _likeItems = source._likeItems
      _effects = source._effects
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._wikiItemID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._itemKind)
        case 3: try decoder.decodeSingularStringField(value: &_storage._pics)
        case 4: try decoder.decodeSingularStringField(value: &_storage._opVideos)
        case 5: try decoder.decodeSingularStringField(value: &_storage._theory)
        case 6: try decoder.decodeSingularStringField(value: &_storage._alias)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._safety)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._complexity)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._pain)
        case 10: try decoder.decodeSingularStringField(value: &_storage._users)
        case 11: try decoder.decodeSingularStringField(value: &_storage._strongPoint)
        case 12: try decoder.decodeSingularStringField(value: &_storage._weakPoint)
        case 13: try decoder.decodeSingularStringField(value: &_storage._contraindications)
        case 14: try decoder.decodeSingularStringField(value: &_storage._opTime)
        case 15: try decoder.decodeSingularStringField(value: &_storage._continuativeTime)
        case 16: try decoder.decodeSingularStringField(value: &_storage._anesthesiaMode)
        case 17: try decoder.decodeSingularStringField(value: &_storage._recoveryPeriod)
        case 18: try decoder.decodeSingularStringField(value: &_storage._treatPeriod)
        case 19: try decoder.decodeSingularStringField(value: &_storage._qualification)
        case 20: try decoder.decodeSingularStringField(value: &_storage._treatMode)
        case 21: try decoder.decodeSingularStringField(value: &_storage._preparation)
        case 22: try decoder.decodeSingularStringField(value: &_storage._wikiItemName)
        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._recoverStage)
        case 27: try decoder.decodeRepeatedMessageField(value: &_storage._instruments)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._likeItems)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._effects)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._wikiItemID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._wikiItemID, fieldNumber: 1)
      }
      if !_storage._itemKind.isEmpty {
        try visitor.visitSingularStringField(value: _storage._itemKind, fieldNumber: 2)
      }
      if !_storage._pics.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pics, fieldNumber: 3)
      }
      if !_storage._opVideos.isEmpty {
        try visitor.visitSingularStringField(value: _storage._opVideos, fieldNumber: 4)
      }
      if !_storage._theory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._theory, fieldNumber: 5)
      }
      if !_storage._alias.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alias, fieldNumber: 6)
      }
      if _storage._safety != 0 {
        try visitor.visitSingularInt32Field(value: _storage._safety, fieldNumber: 7)
      }
      if _storage._complexity != 0 {
        try visitor.visitSingularInt32Field(value: _storage._complexity, fieldNumber: 8)
      }
      if _storage._pain != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pain, fieldNumber: 9)
      }
      if !_storage._users.isEmpty {
        try visitor.visitSingularStringField(value: _storage._users, fieldNumber: 10)
      }
      if !_storage._strongPoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._strongPoint, fieldNumber: 11)
      }
      if !_storage._weakPoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._weakPoint, fieldNumber: 12)
      }
      if !_storage._contraindications.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contraindications, fieldNumber: 13)
      }
      if !_storage._opTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._opTime, fieldNumber: 14)
      }
      if !_storage._continuativeTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._continuativeTime, fieldNumber: 15)
      }
      if !_storage._anesthesiaMode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._anesthesiaMode, fieldNumber: 16)
      }
      if !_storage._recoveryPeriod.isEmpty {
        try visitor.visitSingularStringField(value: _storage._recoveryPeriod, fieldNumber: 17)
      }
      if !_storage._treatPeriod.isEmpty {
        try visitor.visitSingularStringField(value: _storage._treatPeriod, fieldNumber: 18)
      }
      if !_storage._qualification.isEmpty {
        try visitor.visitSingularStringField(value: _storage._qualification, fieldNumber: 19)
      }
      if !_storage._treatMode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._treatMode, fieldNumber: 20)
      }
      if !_storage._preparation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preparation, fieldNumber: 21)
      }
      if !_storage._wikiItemName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._wikiItemName, fieldNumber: 22)
      }
      if !_storage._recoverStage.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._recoverStage, fieldNumber: 26)
      }
      if !_storage._instruments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._instruments, fieldNumber: 27)
      }
      if !_storage._likeItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._likeItems, fieldNumber: 28)
      }
      if !_storage._effects.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._effects, fieldNumber: 29)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemInfo, rhs: Protogo_WikiItemInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._wikiItemID != rhs_storage._wikiItemID {return false}
        if _storage._itemKind != rhs_storage._itemKind {return false}
        if _storage._pics != rhs_storage._pics {return false}
        if _storage._opVideos != rhs_storage._opVideos {return false}
        if _storage._theory != rhs_storage._theory {return false}
        if _storage._alias != rhs_storage._alias {return false}
        if _storage._safety != rhs_storage._safety {return false}
        if _storage._complexity != rhs_storage._complexity {return false}
        if _storage._pain != rhs_storage._pain {return false}
        if _storage._users != rhs_storage._users {return false}
        if _storage._strongPoint != rhs_storage._strongPoint {return false}
        if _storage._weakPoint != rhs_storage._weakPoint {return false}
        if _storage._contraindications != rhs_storage._contraindications {return false}
        if _storage._opTime != rhs_storage._opTime {return false}
        if _storage._continuativeTime != rhs_storage._continuativeTime {return false}
        if _storage._anesthesiaMode != rhs_storage._anesthesiaMode {return false}
        if _storage._recoveryPeriod != rhs_storage._recoveryPeriod {return false}
        if _storage._treatPeriod != rhs_storage._treatPeriod {return false}
        if _storage._qualification != rhs_storage._qualification {return false}
        if _storage._treatMode != rhs_storage._treatMode {return false}
        if _storage._preparation != rhs_storage._preparation {return false}
        if _storage._wikiItemName != rhs_storage._wikiItemName {return false}
        if _storage._recoverStage != rhs_storage._recoverStage {return false}
        if _storage._instruments != rhs_storage._instruments {return false}
        if _storage._likeItems != rhs_storage._likeItems {return false}
        if _storage._effects != rhs_storage._effects {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_PostRecoverStageItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostRecoverStageItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "days"),
    3: .standard(proto: "recover_tip"),
    4: .standard(proto: "nursing_methods"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.days)
      case 3: try decoder.decodeSingularStringField(value: &self.recoverTip)
      case 4: try decoder.decodeSingularStringField(value: &self.nursingMethods)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.days.isEmpty {
      try visitor.visitSingularStringField(value: self.days, fieldNumber: 2)
    }
    if !self.recoverTip.isEmpty {
      try visitor.visitSingularStringField(value: self.recoverTip, fieldNumber: 3)
    }
    if !self.nursingMethods.isEmpty {
      try visitor.visitSingularStringField(value: self.nursingMethods, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_PostRecoverStageItem, rhs: Protogo_PostRecoverStageItem) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.days != rhs.days {return false}
    if lhs.recoverTip != rhs.recoverTip {return false}
    if lhs.nursingMethods != rhs.nursingMethods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiItemList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_id"),
    2: .standard(proto: "item_name"),
    3: .same(proto: "level"),
    4: .standard(proto: "item_info"),
    5: .standard(proto: "item_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemID)
      case 2: try decoder.decodeSingularStringField(value: &self.itemName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.level)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.itemInfo)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.itemList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemID, fieldNumber: 1)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 2)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 3)
    }
    if !self.itemInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemInfo, fieldNumber: 4)
    }
    if !self.itemList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemList, rhs: Protogo_WikiItemList) -> Bool {
    if lhs.itemID != rhs.itemID {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.level != rhs.level {return false}
    if lhs.itemInfo != rhs.itemInfo {return false}
    if lhs.itemList != rhs.itemList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetItemListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetItemListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_kind_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.itemKindID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemKindID.isEmpty {
      try visitor.visitSingularStringField(value: self.itemKindID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetItemListRequest, rhs: Protogo_WikiGetItemListRequest) -> Bool {
    if lhs.itemKindID != rhs.itemKindID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetItemListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetItemListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetItemListResponse, rhs: Protogo_WikiGetItemListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetItemRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetItemRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_item_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.wikiItemID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.wikiItemID.isEmpty {
      try visitor.visitSingularStringField(value: self.wikiItemID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetItemRequest, rhs: Protogo_WikiGetItemRequest) -> Bool {
    if lhs.wikiItemID != rhs.wikiItemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetItemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetItemResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetItemResponse, rhs: Protogo_WikiGetItemResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiInstrumentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiInstrumentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_instrument_id"),
    2: .standard(proto: "instrument_name"),
    3: .standard(proto: "class_id"),
    4: .same(proto: "pics"),
    5: .standard(proto: "op_videos"),
    6: .standard(proto: "instrument_desc"),
    7: .same(proto: "alias"),
    8: .same(proto: "characteristic"),
    9: .standard(proto: "available_range"),
    10: .standard(proto: "instrument_type"),
    11: .same(proto: "place"),
    12: .same(proto: "factory"),
    13: .same(proto: "ttm"),
    14: .standard(proto: "strong_point"),
    15: .standard(proto: "weak_point"),
    16: .same(proto: "theory"),
    17: .standard(proto: "op_mode"),
    18: .standard(proto: "treat_time"),
    19: .standard(proto: "anesthesia_mode"),
    20: .standard(proto: "recovery_time"),
    21: .standard(proto: "treat_period"),
    22: .standard(proto: "continuative_effect"),
    23: .same(proto: "qualification"),
    24: .same(proto: "reaction"),
    25: .standard(proto: "safety_tip"),
    26: .standard(proto: "distinguish_notes"),
    27: .standard(proto: "distinguish_pics"),
    28: .same(proto: "link"),
    29: .same(proto: "nmp"),
    41: .standard(proto: "like_instrument"),
    42: .standard(proto: "apply_items"),
    43: .same(proto: "effects"),
    44: .same(proto: "params"),
    45: .same(proto: "brand"),
    46: .same(proto: "certifications"),
  ]

  fileprivate class _StorageClass {
    var _wikiInstrumentID: String = String()
    var _instrumentName: String = String()
    var _classID: String = String()
    var _pics: String = String()
    var _opVideos: String = String()
    var _instrumentDesc: String = String()
    var _alias: String = String()
    var _characteristic: String = String()
    var _availableRange: String = String()
    var _instrumentType: Int32 = 0
    var _place: String = String()
    var _factory: String = String()
    var _ttm: String = String()
    var _strongPoint: String = String()
    var _weakPoint: String = String()
    var _theory: String = String()
    var _opMode: String = String()
    var _treatTime: String = String()
    var _anesthesiaMode: String = String()
    var _recoveryTime: String = String()
    var _treatPeriod: String = String()
    var _continuativeEffect: String = String()
    var _qualification: String = String()
    var _reaction: String = String()
    var _safetyTip: String = String()
    var _distinguishNotes: String = String()
    var _distinguishPics: String = String()
    var _link: String = String()
    var _nmp: String = String()
    var _likeInstrument: [Protogo_WikiInstrumentInfo] = []
    var _applyItems: [Protogo_WikiItemInfo] = []
    var _effects: [Protogo_WikiEffectInfo] = []
    var _params: [Protogo_PostInstrumentParams] = []
    var _brand: Protogo_WikiBrandInfo? = nil
    var _certifications: [Protogo_PostInstrumentCertification] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _wikiInstrumentID = source._wikiInstrumentID
      _instrumentName = source._instrumentName
      _classID = source._classID
      _pics = source._pics
      _opVideos = source._opVideos
      _instrumentDesc = source._instrumentDesc
      _alias = source._alias
      _characteristic = source._characteristic
      _availableRange = source._availableRange
      _instrumentType = source._instrumentType
      _place = source._place
      _factory = source._factory
      _ttm = source._ttm
      _strongPoint = source._strongPoint
      _weakPoint = source._weakPoint
      _theory = source._theory
      _opMode = source._opMode
      _treatTime = source._treatTime
      _anesthesiaMode = source._anesthesiaMode
      _recoveryTime = source._recoveryTime
      _treatPeriod = source._treatPeriod
      _continuativeEffect = source._continuativeEffect
      _qualification = source._qualification
      _reaction = source._reaction
      _safetyTip = source._safetyTip
      _distinguishNotes = source._distinguishNotes
      _distinguishPics = source._distinguishPics
      _link = source._link
      _nmp = source._nmp
      _likeInstrument = source._likeInstrument
      _applyItems = source._applyItems
      _effects = source._effects
      _params = source._params
      _brand = source._brand
      _certifications = source._certifications
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._wikiInstrumentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._instrumentName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._classID)
        case 4: try decoder.decodeSingularStringField(value: &_storage._pics)
        case 5: try decoder.decodeSingularStringField(value: &_storage._opVideos)
        case 6: try decoder.decodeSingularStringField(value: &_storage._instrumentDesc)
        case 7: try decoder.decodeSingularStringField(value: &_storage._alias)
        case 8: try decoder.decodeSingularStringField(value: &_storage._characteristic)
        case 9: try decoder.decodeSingularStringField(value: &_storage._availableRange)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._instrumentType)
        case 11: try decoder.decodeSingularStringField(value: &_storage._place)
        case 12: try decoder.decodeSingularStringField(value: &_storage._factory)
        case 13: try decoder.decodeSingularStringField(value: &_storage._ttm)
        case 14: try decoder.decodeSingularStringField(value: &_storage._strongPoint)
        case 15: try decoder.decodeSingularStringField(value: &_storage._weakPoint)
        case 16: try decoder.decodeSingularStringField(value: &_storage._theory)
        case 17: try decoder.decodeSingularStringField(value: &_storage._opMode)
        case 18: try decoder.decodeSingularStringField(value: &_storage._treatTime)
        case 19: try decoder.decodeSingularStringField(value: &_storage._anesthesiaMode)
        case 20: try decoder.decodeSingularStringField(value: &_storage._recoveryTime)
        case 21: try decoder.decodeSingularStringField(value: &_storage._treatPeriod)
        case 22: try decoder.decodeSingularStringField(value: &_storage._continuativeEffect)
        case 23: try decoder.decodeSingularStringField(value: &_storage._qualification)
        case 24: try decoder.decodeSingularStringField(value: &_storage._reaction)
        case 25: try decoder.decodeSingularStringField(value: &_storage._safetyTip)
        case 26: try decoder.decodeSingularStringField(value: &_storage._distinguishNotes)
        case 27: try decoder.decodeSingularStringField(value: &_storage._distinguishPics)
        case 28: try decoder.decodeSingularStringField(value: &_storage._link)
        case 29: try decoder.decodeSingularStringField(value: &_storage._nmp)
        case 41: try decoder.decodeRepeatedMessageField(value: &_storage._likeInstrument)
        case 42: try decoder.decodeRepeatedMessageField(value: &_storage._applyItems)
        case 43: try decoder.decodeRepeatedMessageField(value: &_storage._effects)
        case 44: try decoder.decodeRepeatedMessageField(value: &_storage._params)
        case 45: try decoder.decodeSingularMessageField(value: &_storage._brand)
        case 46: try decoder.decodeRepeatedMessageField(value: &_storage._certifications)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._wikiInstrumentID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._wikiInstrumentID, fieldNumber: 1)
      }
      if !_storage._instrumentName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentName, fieldNumber: 2)
      }
      if !_storage._classID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._classID, fieldNumber: 3)
      }
      if !_storage._pics.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pics, fieldNumber: 4)
      }
      if !_storage._opVideos.isEmpty {
        try visitor.visitSingularStringField(value: _storage._opVideos, fieldNumber: 5)
      }
      if !_storage._instrumentDesc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instrumentDesc, fieldNumber: 6)
      }
      if !_storage._alias.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alias, fieldNumber: 7)
      }
      if !_storage._characteristic.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characteristic, fieldNumber: 8)
      }
      if !_storage._availableRange.isEmpty {
        try visitor.visitSingularStringField(value: _storage._availableRange, fieldNumber: 9)
      }
      if _storage._instrumentType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._instrumentType, fieldNumber: 10)
      }
      if !_storage._place.isEmpty {
        try visitor.visitSingularStringField(value: _storage._place, fieldNumber: 11)
      }
      if !_storage._factory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._factory, fieldNumber: 12)
      }
      if !_storage._ttm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ttm, fieldNumber: 13)
      }
      if !_storage._strongPoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._strongPoint, fieldNumber: 14)
      }
      if !_storage._weakPoint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._weakPoint, fieldNumber: 15)
      }
      if !_storage._theory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._theory, fieldNumber: 16)
      }
      if !_storage._opMode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._opMode, fieldNumber: 17)
      }
      if !_storage._treatTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._treatTime, fieldNumber: 18)
      }
      if !_storage._anesthesiaMode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._anesthesiaMode, fieldNumber: 19)
      }
      if !_storage._recoveryTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._recoveryTime, fieldNumber: 20)
      }
      if !_storage._treatPeriod.isEmpty {
        try visitor.visitSingularStringField(value: _storage._treatPeriod, fieldNumber: 21)
      }
      if !_storage._continuativeEffect.isEmpty {
        try visitor.visitSingularStringField(value: _storage._continuativeEffect, fieldNumber: 22)
      }
      if !_storage._qualification.isEmpty {
        try visitor.visitSingularStringField(value: _storage._qualification, fieldNumber: 23)
      }
      if !_storage._reaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reaction, fieldNumber: 24)
      }
      if !_storage._safetyTip.isEmpty {
        try visitor.visitSingularStringField(value: _storage._safetyTip, fieldNumber: 25)
      }
      if !_storage._distinguishNotes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._distinguishNotes, fieldNumber: 26)
      }
      if !_storage._distinguishPics.isEmpty {
        try visitor.visitSingularStringField(value: _storage._distinguishPics, fieldNumber: 27)
      }
      if !_storage._link.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link, fieldNumber: 28)
      }
      if !_storage._nmp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nmp, fieldNumber: 29)
      }
      if !_storage._likeInstrument.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._likeInstrument, fieldNumber: 41)
      }
      if !_storage._applyItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._applyItems, fieldNumber: 42)
      }
      if !_storage._effects.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._effects, fieldNumber: 43)
      }
      if !_storage._params.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._params, fieldNumber: 44)
      }
      if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      }
      if !_storage._certifications.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._certifications, fieldNumber: 46)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiInstrumentInfo, rhs: Protogo_WikiInstrumentInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._wikiInstrumentID != rhs_storage._wikiInstrumentID {return false}
        if _storage._instrumentName != rhs_storage._instrumentName {return false}
        if _storage._classID != rhs_storage._classID {return false}
        if _storage._pics != rhs_storage._pics {return false}
        if _storage._opVideos != rhs_storage._opVideos {return false}
        if _storage._instrumentDesc != rhs_storage._instrumentDesc {return false}
        if _storage._alias != rhs_storage._alias {return false}
        if _storage._characteristic != rhs_storage._characteristic {return false}
        if _storage._availableRange != rhs_storage._availableRange {return false}
        if _storage._instrumentType != rhs_storage._instrumentType {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._factory != rhs_storage._factory {return false}
        if _storage._ttm != rhs_storage._ttm {return false}
        if _storage._strongPoint != rhs_storage._strongPoint {return false}
        if _storage._weakPoint != rhs_storage._weakPoint {return false}
        if _storage._theory != rhs_storage._theory {return false}
        if _storage._opMode != rhs_storage._opMode {return false}
        if _storage._treatTime != rhs_storage._treatTime {return false}
        if _storage._anesthesiaMode != rhs_storage._anesthesiaMode {return false}
        if _storage._recoveryTime != rhs_storage._recoveryTime {return false}
        if _storage._treatPeriod != rhs_storage._treatPeriod {return false}
        if _storage._continuativeEffect != rhs_storage._continuativeEffect {return false}
        if _storage._qualification != rhs_storage._qualification {return false}
        if _storage._reaction != rhs_storage._reaction {return false}
        if _storage._safetyTip != rhs_storage._safetyTip {return false}
        if _storage._distinguishNotes != rhs_storage._distinguishNotes {return false}
        if _storage._distinguishPics != rhs_storage._distinguishPics {return false}
        if _storage._link != rhs_storage._link {return false}
        if _storage._nmp != rhs_storage._nmp {return false}
        if _storage._likeInstrument != rhs_storage._likeInstrument {return false}
        if _storage._applyItems != rhs_storage._applyItems {return false}
        if _storage._effects != rhs_storage._effects {return false}
        if _storage._params != rhs_storage._params {return false}
        if _storage._brand != rhs_storage._brand {return false}
        if _storage._certifications != rhs_storage._certifications {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiInstrumentListInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiInstrumentListInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_instrument_id"),
    2: .standard(proto: "instrument_name"),
    3: .standard(proto: "class_id"),
    4: .standard(proto: "class_name"),
    5: .same(proto: "brand"),
    6: .standard(proto: "brand_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.wikiInstrumentID)
      case 2: try decoder.decodeSingularStringField(value: &self.instrumentName)
      case 3: try decoder.decodeSingularStringField(value: &self.classID)
      case 4: try decoder.decodeSingularStringField(value: &self.className)
      case 5: try decoder.decodeSingularStringField(value: &self.brand)
      case 6: try decoder.decodeSingularStringField(value: &self.brandName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.wikiInstrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.wikiInstrumentID, fieldNumber: 1)
    }
    if !self.instrumentName.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentName, fieldNumber: 2)
    }
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 3)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 4)
    }
    if !self.brand.isEmpty {
      try visitor.visitSingularStringField(value: self.brand, fieldNumber: 5)
    }
    if !self.brandName.isEmpty {
      try visitor.visitSingularStringField(value: self.brandName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiInstrumentListInfo, rhs: Protogo_WikiInstrumentListInfo) -> Bool {
    if lhs.wikiInstrumentID != rhs.wikiInstrumentID {return false}
    if lhs.instrumentName != rhs.instrumentName {return false}
    if lhs.classID != rhs.classID {return false}
    if lhs.className != rhs.className {return false}
    if lhs.brand != rhs.brand {return false}
    if lhs.brandName != rhs.brandName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_PostInstrumentParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostInstrumentParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "param_id"),
    2: .standard(proto: "param_name"),
    3: .standard(proto: "param_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.paramID)
      case 2: try decoder.decodeSingularStringField(value: &self.paramName)
      case 3: try decoder.decodeSingularStringField(value: &self.paramValue)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.paramID != 0 {
      try visitor.visitSingularInt32Field(value: self.paramID, fieldNumber: 1)
    }
    if !self.paramName.isEmpty {
      try visitor.visitSingularStringField(value: self.paramName, fieldNumber: 2)
    }
    if !self.paramValue.isEmpty {
      try visitor.visitSingularStringField(value: self.paramValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_PostInstrumentParams, rhs: Protogo_PostInstrumentParams) -> Bool {
    if lhs.paramID != rhs.paramID {return false}
    if lhs.paramName != rhs.paramName {return false}
    if lhs.paramValue != rhs.paramValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_PostInstrumentCertification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostInstrumentCertification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "certification_id"),
    2: .same(proto: "pics"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.certificationID)
      case 2: try decoder.decodeSingularStringField(value: &self.pics)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.certificationID != 0 {
      try visitor.visitSingularInt32Field(value: self.certificationID, fieldNumber: 1)
    }
    if !self.pics.isEmpty {
      try visitor.visitSingularStringField(value: self.pics, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_PostInstrumentCertification, rhs: Protogo_PostInstrumentCertification) -> Bool {
    if lhs.certificationID != rhs.certificationID {return false}
    if lhs.pics != rhs.pics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetInstrumentListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetInstrumentListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_name"),
    2: .standard(proto: "class_id"),
    3: .standard(proto: "instrument_type"),
    4: .same(proto: "page"),
    5: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.instrumentName)
      case 2: try decoder.decodeSingularStringField(value: &self.classID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.instrumentType)
      case 4: try decoder.decodeSingularMessageField(value: &self._page)
      case 5: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentName.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentName, fieldNumber: 1)
    }
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 2)
    }
    if self.instrumentType != 0 {
      try visitor.visitSingularInt32Field(value: self.instrumentType, fieldNumber: 3)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetInstrumentListRequest, rhs: Protogo_WikiGetInstrumentListRequest) -> Bool {
    if lhs.instrumentName != rhs.instrumentName {return false}
    if lhs.classID != rhs.classID {return false}
    if lhs.instrumentType != rhs.instrumentType {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetInstrumentListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetInstrumentListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetInstrumentListResponse, rhs: Protogo_WikiGetInstrumentListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetInstrumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetInstrumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_instrument_id"),
    2: .standard(proto: "instrument_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.wikiInstrumentID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.instrumentType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.wikiInstrumentID.isEmpty {
      try visitor.visitSingularStringField(value: self.wikiInstrumentID, fieldNumber: 1)
    }
    if self.instrumentType != 0 {
      try visitor.visitSingularInt32Field(value: self.instrumentType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetInstrumentRequest, rhs: Protogo_WikiGetInstrumentRequest) -> Bool {
    if lhs.wikiInstrumentID != rhs.wikiInstrumentID {return false}
    if lhs.instrumentType != rhs.instrumentType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetInstrumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetInstrumentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetInstrumentResponse, rhs: Protogo_WikiGetInstrumentResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiStrumentClassInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiStrumentClassInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_class_id"),
    2: .standard(proto: "instrument_class_name"),
    3: .same(proto: "category"),
    4: .same(proto: "instruments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.instrumentClassID)
      case 2: try decoder.decodeSingularStringField(value: &self.instrumentClassName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.category)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.instruments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentClassID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentClassID, fieldNumber: 1)
    }
    if !self.instrumentClassName.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentClassName, fieldNumber: 2)
    }
    if self.category != 0 {
      try visitor.visitSingularInt32Field(value: self.category, fieldNumber: 3)
    }
    if !self.instruments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instruments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiStrumentClassInfo, rhs: Protogo_WikiStrumentClassInfo) -> Bool {
    if lhs.instrumentClassID != rhs.instrumentClassID {return false}
    if lhs.instrumentClassName != rhs.instrumentClassName {return false}
    if lhs.category != rhs.category {return false}
    if lhs.instruments != rhs.instruments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetStrumentClassListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetStrumentClassListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.category)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.category != 0 {
      try visitor.visitSingularInt32Field(value: self.category, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetStrumentClassListRequest, rhs: Protogo_WikiGetStrumentClassListRequest) -> Bool {
    if lhs.category != rhs.category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetStrumentClassListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetStrumentClassListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetStrumentClassListResponse, rhs: Protogo_WikiGetStrumentClassListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetStrumentClassRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetStrumentClassRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "instrument_class_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.instrumentClassID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instrumentClassID.isEmpty {
      try visitor.visitSingularStringField(value: self.instrumentClassID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetStrumentClassRequest, rhs: Protogo_WikiGetStrumentClassRequest) -> Bool {
    if lhs.instrumentClassID != rhs.instrumentClassID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetStrumentClassResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetStrumentClassResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetStrumentClassResponse, rhs: Protogo_WikiGetStrumentClassResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiParamInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiParamInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_param_id"),
    2: .standard(proto: "param_name"),
    3: .same(proto: "belong"),
    4: .standard(proto: "belong_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.wikiParamID)
      case 2: try decoder.decodeSingularStringField(value: &self.paramName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.belong)
      case 4: try decoder.decodeSingularStringField(value: &self.belongName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.wikiParamID != 0 {
      try visitor.visitSingularInt32Field(value: self.wikiParamID, fieldNumber: 1)
    }
    if !self.paramName.isEmpty {
      try visitor.visitSingularStringField(value: self.paramName, fieldNumber: 2)
    }
    if self.belong != 0 {
      try visitor.visitSingularInt32Field(value: self.belong, fieldNumber: 3)
    }
    if !self.belongName.isEmpty {
      try visitor.visitSingularStringField(value: self.belongName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiParamInfo, rhs: Protogo_WikiParamInfo) -> Bool {
    if lhs.wikiParamID != rhs.wikiParamID {return false}
    if lhs.paramName != rhs.paramName {return false}
    if lhs.belong != rhs.belong {return false}
    if lhs.belongName != rhs.belongName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiEffectInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiEffectInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_effect_id"),
    2: .standard(proto: "wiki_effect_name"),
    3: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.wikiEffectID)
      case 2: try decoder.decodeSingularStringField(value: &self.wikiEffectName)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.wikiEffectID != 0 {
      try visitor.visitSingularInt32Field(value: self.wikiEffectID, fieldNumber: 1)
    }
    if !self.wikiEffectName.isEmpty {
      try visitor.visitSingularStringField(value: self.wikiEffectName, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiEffectInfo, rhs: Protogo_WikiEffectInfo) -> Bool {
    if lhs.wikiEffectID != rhs.wikiEffectID {return false}
    if lhs.wikiEffectName != rhs.wikiEffectName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiBrandInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiBrandInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_brand_id"),
    2: .standard(proto: "wiki_brand_name"),
    3: .same(proto: "logo"),
    4: .same(proto: "company"),
    5: .same(proto: "ttm"),
    6: .same(proto: "introduction"),
    7: .standard(proto: "lts_nstrument"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.wikiBrandID)
      case 2: try decoder.decodeSingularStringField(value: &self.wikiBrandName)
      case 3: try decoder.decodeSingularStringField(value: &self.logo)
      case 4: try decoder.decodeSingularStringField(value: &self.company)
      case 5: try decoder.decodeSingularStringField(value: &self.ttm)
      case 6: try decoder.decodeSingularStringField(value: &self.introduction)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.ltsNstrument)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.wikiBrandID != 0 {
      try visitor.visitSingularInt32Field(value: self.wikiBrandID, fieldNumber: 1)
    }
    if !self.wikiBrandName.isEmpty {
      try visitor.visitSingularStringField(value: self.wikiBrandName, fieldNumber: 2)
    }
    if !self.logo.isEmpty {
      try visitor.visitSingularStringField(value: self.logo, fieldNumber: 3)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 4)
    }
    if !self.ttm.isEmpty {
      try visitor.visitSingularStringField(value: self.ttm, fieldNumber: 5)
    }
    if !self.introduction.isEmpty {
      try visitor.visitSingularStringField(value: self.introduction, fieldNumber: 6)
    }
    if !self.ltsNstrument.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ltsNstrument, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiBrandInfo, rhs: Protogo_WikiBrandInfo) -> Bool {
    if lhs.wikiBrandID != rhs.wikiBrandID {return false}
    if lhs.wikiBrandName != rhs.wikiBrandName {return false}
    if lhs.logo != rhs.logo {return false}
    if lhs.company != rhs.company {return false}
    if lhs.ttm != rhs.ttm {return false}
    if lhs.introduction != rhs.introduction {return false}
    if lhs.ltsNstrument != rhs.ltsNstrument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetBrandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetBrandRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wiki_brand_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.wikiBrandID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.wikiBrandID != 0 {
      try visitor.visitSingularInt32Field(value: self.wikiBrandID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetBrandRequest, rhs: Protogo_WikiGetBrandRequest) -> Bool {
    if lhs.wikiBrandID != rhs.wikiBrandID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetBrandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetBrandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetBrandResponse, rhs: Protogo_WikiGetBrandResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiRealCaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiRealCaseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "real_case_id"),
    2: .standard(proto: "real_case_name"),
    3: .standard(proto: "class_id"),
    4: .standard(proto: "class_name"),
    5: .standard(proto: "preoperative_pic"),
    8: .standard(proto: "postoperative_pic"),
    9: .same(proto: "description"),
    11: .standard(proto: "wiki_items"),
    12: .same(proto: "medicaler"),
    13: .same(proto: "hospital"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.realCaseID)
      case 2: try decoder.decodeSingularStringField(value: &self.realCaseName)
      case 3: try decoder.decodeSingularStringField(value: &self.classID)
      case 4: try decoder.decodeSingularStringField(value: &self.className)
      case 5: try decoder.decodeSingularStringField(value: &self.preoperativePic)
      case 8: try decoder.decodeSingularStringField(value: &self.postoperativePic)
      case 9: try decoder.decodeSingularStringField(value: &self.description_p)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.wikiItems)
      case 12: try decoder.decodeSingularMessageField(value: &self._medicaler)
      case 13: try decoder.decodeSingularMessageField(value: &self._hospital)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.realCaseID.isEmpty {
      try visitor.visitSingularStringField(value: self.realCaseID, fieldNumber: 1)
    }
    if !self.realCaseName.isEmpty {
      try visitor.visitSingularStringField(value: self.realCaseName, fieldNumber: 2)
    }
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 3)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 4)
    }
    if !self.preoperativePic.isEmpty {
      try visitor.visitSingularStringField(value: self.preoperativePic, fieldNumber: 5)
    }
    if !self.postoperativePic.isEmpty {
      try visitor.visitSingularStringField(value: self.postoperativePic, fieldNumber: 8)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 9)
    }
    if !self.wikiItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.wikiItems, fieldNumber: 11)
    }
    if let v = self._medicaler {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._hospital {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiRealCaseInfo, rhs: Protogo_WikiRealCaseInfo) -> Bool {
    if lhs.realCaseID != rhs.realCaseID {return false}
    if lhs.realCaseName != rhs.realCaseName {return false}
    if lhs.classID != rhs.classID {return false}
    if lhs.className != rhs.className {return false}
    if lhs.preoperativePic != rhs.preoperativePic {return false}
    if lhs.postoperativePic != rhs.postoperativePic {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.wikiItems != rhs.wikiItems {return false}
    if lhs._medicaler != rhs._medicaler {return false}
    if lhs._hospital != rhs._hospital {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiMedicalerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiMedicalerInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "medicaler_id"),
    2: .standard(proto: "medicaler_name"),
    3: .standard(proto: "medicaler_photo"),
    4: .standard(proto: "role_name"),
    5: .standard(proto: "real_case_num"),
    6: .standard(proto: "expert_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.medicalerID)
      case 2: try decoder.decodeSingularStringField(value: &self.medicalerName)
      case 3: try decoder.decodeSingularStringField(value: &self.medicalerPhoto)
      case 4: try decoder.decodeSingularStringField(value: &self.roleName)
      case 5: try decoder.decodeSingularInt32Field(value: &self.realCaseNum)
      case 6: try decoder.decodeSingularStringField(value: &self.expertIn)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicalerID.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerID, fieldNumber: 1)
    }
    if !self.medicalerName.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerName, fieldNumber: 2)
    }
    if !self.medicalerPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerPhoto, fieldNumber: 3)
    }
    if !self.roleName.isEmpty {
      try visitor.visitSingularStringField(value: self.roleName, fieldNumber: 4)
    }
    if self.realCaseNum != 0 {
      try visitor.visitSingularInt32Field(value: self.realCaseNum, fieldNumber: 5)
    }
    if !self.expertIn.isEmpty {
      try visitor.visitSingularStringField(value: self.expertIn, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiMedicalerInfo, rhs: Protogo_WikiMedicalerInfo) -> Bool {
    if lhs.medicalerID != rhs.medicalerID {return false}
    if lhs.medicalerName != rhs.medicalerName {return false}
    if lhs.medicalerPhoto != rhs.medicalerPhoto {return false}
    if lhs.roleName != rhs.roleName {return false}
    if lhs.realCaseNum != rhs.realCaseNum {return false}
    if lhs.expertIn != rhs.expertIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiHoispitalInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiHoispitalInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "hospital_name"),
    3: .standard(proto: "hospital_photo"),
    4: .standard(proto: "hospital_addr"),
    5: .standard(proto: "hospital_coordinate"),
    6: .standard(proto: "real_case_num"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 3: try decoder.decodeSingularStringField(value: &self.hospitalPhoto)
      case 4: try decoder.decodeSingularStringField(value: &self.hospitalAddr)
      case 5: try decoder.decodeSingularStringField(value: &self.hospitalCoordinate)
      case 6: try decoder.decodeSingularInt32Field(value: &self.realCaseNum)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hospitalID.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 2)
    }
    if !self.hospitalPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalPhoto, fieldNumber: 3)
    }
    if !self.hospitalAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddr, fieldNumber: 4)
    }
    if !self.hospitalCoordinate.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalCoordinate, fieldNumber: 5)
    }
    if self.realCaseNum != 0 {
      try visitor.visitSingularInt32Field(value: self.realCaseNum, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiHoispitalInfo, rhs: Protogo_WikiHoispitalInfo) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.hospitalPhoto != rhs.hospitalPhoto {return false}
    if lhs.hospitalAddr != rhs.hospitalAddr {return false}
    if lhs.hospitalCoordinate != rhs.hospitalCoordinate {return false}
    if lhs.realCaseNum != rhs.realCaseNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.classID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseListRequest, rhs: Protogo_WikiGetRealCaseListRequest) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseListResponse, rhs: Protogo_WikiGetRealCaseListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "real_case_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.realCaseID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.realCaseID.isEmpty {
      try visitor.visitSingularStringField(value: self.realCaseID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseRequest, rhs: Protogo_WikiGetRealCaseRequest) -> Bool {
    if lhs.realCaseID != rhs.realCaseID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseResponse, rhs: Protogo_WikiGetRealCaseResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiRealCaseClassInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiRealCaseClassInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .standard(proto: "class_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.classID)
      case 2: try decoder.decodeSingularStringField(value: &self.className)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 1)
    }
    if !self.className.isEmpty {
      try visitor.visitSingularStringField(value: self.className, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiRealCaseClassInfo, rhs: Protogo_WikiRealCaseClassInfo) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs.className != rhs.className {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseClassListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseClassListRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseClassListRequest, rhs: Protogo_WikiGetRealCaseClassListRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiGetRealCaseClassListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiGetRealCaseClassListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiGetRealCaseClassListResponse, rhs: Protogo_WikiGetRealCaseClassListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerHomepage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerHomepage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "medicaler_id"),
    2: .standard(proto: "medicaler_name"),
    3: .standard(proto: "medicaler_photo"),
    4: .standard(proto: "role_name"),
    5: .same(proto: "careeryear"),
    6: .standard(proto: "expert_in"),
    7: .standard(proto: "medicaler_type"),
    8: .same(proto: "score"),
    9: .same(proto: "desc"),
    10: .standard(proto: "real_case_num"),
    11: .standard(proto: "item_num"),
    12: .same(proto: "hospitals"),
    13: .standard(proto: "real_cases"),
    14: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.medicalerID)
      case 2: try decoder.decodeSingularStringField(value: &self.medicalerName)
      case 3: try decoder.decodeSingularStringField(value: &self.medicalerPhoto)
      case 4: try decoder.decodeSingularStringField(value: &self.roleName)
      case 5: try decoder.decodeSingularStringField(value: &self.careeryear)
      case 6: try decoder.decodeSingularStringField(value: &self.expertIn)
      case 7: try decoder.decodeSingularInt32Field(value: &self.medicalerType)
      case 8: try decoder.decodeSingularInt32Field(value: &self.score)
      case 9: try decoder.decodeSingularStringField(value: &self.desc)
      case 10: try decoder.decodeSingularInt32Field(value: &self.realCaseNum)
      case 11: try decoder.decodeSingularInt32Field(value: &self.itemNum)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.hospitals)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.realCases)
      case 14: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicalerID.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerID, fieldNumber: 1)
    }
    if !self.medicalerName.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerName, fieldNumber: 2)
    }
    if !self.medicalerPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerPhoto, fieldNumber: 3)
    }
    if !self.roleName.isEmpty {
      try visitor.visitSingularStringField(value: self.roleName, fieldNumber: 4)
    }
    if !self.careeryear.isEmpty {
      try visitor.visitSingularStringField(value: self.careeryear, fieldNumber: 5)
    }
    if !self.expertIn.isEmpty {
      try visitor.visitSingularStringField(value: self.expertIn, fieldNumber: 6)
    }
    if self.medicalerType != 0 {
      try visitor.visitSingularInt32Field(value: self.medicalerType, fieldNumber: 7)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 8)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 9)
    }
    if self.realCaseNum != 0 {
      try visitor.visitSingularInt32Field(value: self.realCaseNum, fieldNumber: 10)
    }
    if self.itemNum != 0 {
      try visitor.visitSingularInt32Field(value: self.itemNum, fieldNumber: 11)
    }
    if !self.hospitals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hospitals, fieldNumber: 12)
    }
    if !self.realCases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.realCases, fieldNumber: 13)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerHomepage, rhs: Protogo_MedicalerHomepage) -> Bool {
    if lhs.medicalerID != rhs.medicalerID {return false}
    if lhs.medicalerName != rhs.medicalerName {return false}
    if lhs.medicalerPhoto != rhs.medicalerPhoto {return false}
    if lhs.roleName != rhs.roleName {return false}
    if lhs.careeryear != rhs.careeryear {return false}
    if lhs.expertIn != rhs.expertIn {return false}
    if lhs.medicalerType != rhs.medicalerType {return false}
    if lhs.score != rhs.score {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.realCaseNum != rhs.realCaseNum {return false}
    if lhs.itemNum != rhs.itemNum {return false}
    if lhs.hospitals != rhs.hospitals {return false}
    if lhs.realCases != rhs.realCases {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerHomepageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerHomepageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "medicaler_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.medicalerID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicalerID.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerHomepageRequest, rhs: Protogo_MedicalerHomepageRequest) -> Bool {
    if lhs.medicalerID != rhs.medicalerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerHomepageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerHomepageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerHomepageResponse, rhs: Protogo_MedicalerHomepageResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerItemListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerItemListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "medicaler_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.medicalerID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicalerID.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerItemListRequest, rhs: Protogo_MedicalerItemListRequest) -> Bool {
    if lhs.medicalerID != rhs.medicalerID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerItemListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerItemListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerItemListResponse, rhs: Protogo_MedicalerItemListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerRealCaseListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerRealCaseListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "medicaler_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.medicalerID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.medicalerID.isEmpty {
      try visitor.visitSingularStringField(value: self.medicalerID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerRealCaseListRequest, rhs: Protogo_MedicalerRealCaseListRequest) -> Bool {
    if lhs.medicalerID != rhs.medicalerID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_MedicalerRealCaseListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MedicalerRealCaseListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_MedicalerRealCaseListResponse, rhs: Protogo_MedicalerRealCaseListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiItemRealCaseListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemRealCaseListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wike_item_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.wikeItemID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.wikeItemID.isEmpty {
      try visitor.visitSingularStringField(value: self.wikeItemID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemRealCaseListRequest, rhs: Protogo_WikiItemRealCaseListRequest) -> Bool {
    if lhs.wikeItemID != rhs.wikeItemID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiItemRealCaseListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemRealCaseListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemRealCaseListResponse, rhs: Protogo_WikiItemRealCaseListResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiItemMedicalerRecommendRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemMedicalerRecommendRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wike_item_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "sort_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.wikeItemID)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      case 3: try decoder.decodeSingularInt32Field(value: &self.sortType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.wikeItemID.isEmpty {
      try visitor.visitSingularStringField(value: self.wikeItemID, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.sortType != 0 {
      try visitor.visitSingularInt32Field(value: self.sortType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemMedicalerRecommendRequest, rhs: Protogo_WikiItemMedicalerRecommendRequest) -> Bool {
    if lhs.wikeItemID != rhs.wikeItemID {return false}
    if lhs._page != rhs._page {return false}
    if lhs.sortType != rhs.sortType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WikiItemMedicalerRecommendResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WikiItemMedicalerRecommendResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
    3: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      case 3: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WikiItemMedicalerRecommendResponse, rhs: Protogo_WikiItemMedicalerRecommendResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
