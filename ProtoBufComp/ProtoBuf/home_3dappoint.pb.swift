// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: home_3dappoint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///////3d测脸展示信息
struct Protogo_ThreeDAppointInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cityCode: Int32 = 0

  var page: Protogo_Paging {
    get {return _page ?? Protogo_Paging()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  mutating func clearPage() {self._page = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _page: Protogo_Paging? = nil
}

///响应参数
struct Protogo_ThreeDAppointInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_HospitalBaseInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///////提交3d测脸预约
struct Protogo_ThreeDAppointCommitRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var accountID: String = String()

  ///问诊单号
  var visitsIndex: Int32 = 0

  ///预约开始时间
  var startTime: String = String()

  ///预约结束时间
  var endTime: String = String()

  var specialNeeds: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_ThreeDAppointCommitResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

///////3d测脸预约展示信息
struct Protogo_ThreeDAppointDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var accountID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_ThreeDAppointDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_ThreeDAppointDetail {
    get {return _data ?? Protogo_ThreeDAppointDetail()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_ThreeDAppointDetail? = nil
}

struct Protogo_ThreeDAppointDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bhospital: Protogo_HospitalBaseInfo {
    get {return _bhospital ?? Protogo_HospitalBaseInfo()}
    set {_bhospital = newValue}
  }
  /// Returns true if `bhospital` has been explicitly set.
  var hasBhospital: Bool {return self._bhospital != nil}
  /// Clears the value of `bhospital`. Subsequent reads from it will return its default value.
  mutating func clearBhospital() {self._bhospital = nil}

  var schedules: [Protogo_HospitalSchedule] = []

  ///最新面诊单数据
  var visit: Protogo_VisitBaseInfo {
    get {return _visit ?? Protogo_VisitBaseInfo()}
    set {_visit = newValue}
  }
  /// Returns true if `visit` has been explicitly set.
  var hasVisit: Bool {return self._visit != nil}
  /// Clears the value of `visit`. Subsequent reads from it will return its default value.
  mutating func clearVisit() {self._visit = nil}

  var items: [Protogo_ItemInfo] = []

  var propertys: [Protogo_VideoProperty] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bhospital: Protogo_HospitalBaseInfo? = nil
  fileprivate var _visit: Protogo_VisitBaseInfo? = nil
}

struct Protogo_HospitalSchedule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var workDate: String = String()

  var times: [Protogo_HospitalTimeInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_HospitalTimeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///班次开始时间
  var startTime: String = String()

  ///班次结束时间
  var endTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 微信新增电子咨询单
/// /app/wechatappoint
struct Protogo_WechatAddAppointRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 医院id
  var hospitalID: Int32 {
    get {return _storage._hospitalID}
    set {_uniqueStorage()._hospitalID = newValue}
  }

  /// 客户id
  var accountID: String {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  ///问诊项目
  var visitsItems: String {
    get {return _storage._visitsItems}
    set {_uniqueStorage()._visitsItems = newValue}
  }

  ///详细描述
  var visitsNotes: String {
    get {return _storage._visitsNotes}
    set {_uniqueStorage()._visitsNotes = newValue}
  }

  ///既往史
  var surgeryHistory: String {
    get {return _storage._surgeryHistory}
    set {_uniqueStorage()._surgeryHistory = newValue}
  }

  ///既往史备注
  var historyNotes: String {
    get {return _storage._historyNotes}
    set {_uniqueStorage()._historyNotes = newValue}
  }

  ///审美风格
  var aestheticStyle: String {
    get {return _storage._aestheticStyle}
    set {_uniqueStorage()._aestheticStyle = newValue}
  }

  ///疼痛忍耐程度
  var painTolerance: String {
    get {return _storage._painTolerance}
    set {_uniqueStorage()._painTolerance = newValue}
  }

  ///可接受恢复期
  var acceptableRecovery: String {
    get {return _storage._acceptableRecovery}
    set {_uniqueStorage()._acceptableRecovery = newValue}
  }

  ///可接受治疗手段
  var acceptableTreatment: String {
    get {return _storage._acceptableTreatment}
    set {_uniqueStorage()._acceptableTreatment = newValue}
  }

  ///预算范围
  var budgetScope: String {
    get {return _storage._budgetScope}
    set {_uniqueStorage()._budgetScope = newValue}
  }

  ///特殊需求
  var specialNeeds: String {
    get {return _storage._specialNeeds}
    set {_uniqueStorage()._specialNeeds = newValue}
  }

  ///是否可以编辑 1:可以编辑 2:不可以
  var edit: Int32 {
    get {return _storage._edit}
    set {_uniqueStorage()._edit = newValue}
  }

  /// 问诊单号，为空则新增，不为空则更新
  var visitsIndex: String {
    get {return _storage._visitsIndex}
    set {_uniqueStorage()._visitsIndex = newValue}
  }

  /// 主诉
  var mainsuit: String {
    get {return _storage._mainsuit}
    set {_uniqueStorage()._mainsuit = newValue}
  }

  ///预约开始时间
  var startTime: String {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  ///预约结束时间
  var endTime: String {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///响应参数
struct Protogo_WechatAddAppointResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取既往史
/// /app/getproperty
struct Protogo_GetPropertyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_GetPropertyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_VideoProperty] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

/// 获取医院排班
/// /aist/app/gethospitalschedule
struct Protogo_GetHospitalScheduleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_GetHospitalScheduleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_HospitalTimeInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_ThreeDAppointInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "city_code"),
    2: .same(proto: "page"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cityCode)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cityCode != 0 {
      try visitor.visitSingularInt32Field(value: self.cityCode, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointInfoRequest, rhs: Protogo_ThreeDAppointInfoRequest) -> Bool {
    if lhs.cityCode != rhs.cityCode {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointInfoResponse, rhs: Protogo_ThreeDAppointInfoResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointCommitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointCommitRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "visits_index"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "special_needs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.accountID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.visitsIndex)
      case 4: try decoder.decodeSingularStringField(value: &self.startTime)
      case 5: try decoder.decodeSingularStringField(value: &self.endTime)
      case 6: try decoder.decodeSingularStringField(value: &self.specialNeeds)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 2)
    }
    if self.visitsIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.visitsIndex, fieldNumber: 3)
    }
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 4)
    }
    if !self.endTime.isEmpty {
      try visitor.visitSingularStringField(value: self.endTime, fieldNumber: 5)
    }
    if !self.specialNeeds.isEmpty {
      try visitor.visitSingularStringField(value: self.specialNeeds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointCommitRequest, rhs: Protogo_ThreeDAppointCommitRequest) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.visitsIndex != rhs.visitsIndex {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.specialNeeds != rhs.specialNeeds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointCommitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointCommitResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointCommitResponse, rhs: Protogo_ThreeDAppointCommitResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "account_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 2: try decoder.decodeSingularStringField(value: &self.accountID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointDetailRequest, rhs: Protogo_ThreeDAppointDetailRequest) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.accountID != rhs.accountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointDetailResponse, rhs: Protogo_ThreeDAppointDetailResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ThreeDAppointDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThreeDAppointDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bhospital"),
    2: .same(proto: "schedules"),
    3: .same(proto: "visit"),
    4: .same(proto: "items"),
    5: .same(proto: "propertys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bhospital)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.schedules)
      case 3: try decoder.decodeSingularMessageField(value: &self._visit)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.items)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.propertys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bhospital {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.schedules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.schedules, fieldNumber: 2)
    }
    if let v = self._visit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 4)
    }
    if !self.propertys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.propertys, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ThreeDAppointDetail, rhs: Protogo_ThreeDAppointDetail) -> Bool {
    if lhs._bhospital != rhs._bhospital {return false}
    if lhs.schedules != rhs.schedules {return false}
    if lhs._visit != rhs._visit {return false}
    if lhs.items != rhs.items {return false}
    if lhs.propertys != rhs.propertys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_HospitalSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HospitalSchedule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "work_date"),
    2: .same(proto: "times"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.workDate)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.times)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.workDate.isEmpty {
      try visitor.visitSingularStringField(value: self.workDate, fieldNumber: 1)
    }
    if !self.times.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.times, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_HospitalSchedule, rhs: Protogo_HospitalSchedule) -> Bool {
    if lhs.workDate != rhs.workDate {return false}
    if lhs.times != rhs.times {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_HospitalTimeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HospitalTimeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.startTime)
      case 2: try decoder.decodeSingularStringField(value: &self.endTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.startTime.isEmpty {
      try visitor.visitSingularStringField(value: self.startTime, fieldNumber: 1)
    }
    if !self.endTime.isEmpty {
      try visitor.visitSingularStringField(value: self.endTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_HospitalTimeInfo, rhs: Protogo_HospitalTimeInfo) -> Bool {
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WechatAddAppointRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WechatAddAppointRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "visits_items"),
    4: .standard(proto: "visits_notes"),
    5: .standard(proto: "surgery_history"),
    6: .standard(proto: "history_notes"),
    7: .standard(proto: "aesthetic_style"),
    8: .standard(proto: "pain_tolerance"),
    9: .standard(proto: "acceptable_recovery"),
    10: .standard(proto: "acceptable_treatment"),
    11: .standard(proto: "budget_scope"),
    12: .standard(proto: "special_needs"),
    13: .same(proto: "edit"),
    14: .standard(proto: "visits_index"),
    15: .same(proto: "mainsuit"),
    16: .standard(proto: "start_time"),
    17: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _hospitalID: Int32 = 0
    var _accountID: String = String()
    var _visitsItems: String = String()
    var _visitsNotes: String = String()
    var _surgeryHistory: String = String()
    var _historyNotes: String = String()
    var _aestheticStyle: String = String()
    var _painTolerance: String = String()
    var _acceptableRecovery: String = String()
    var _acceptableTreatment: String = String()
    var _budgetScope: String = String()
    var _specialNeeds: String = String()
    var _edit: Int32 = 0
    var _visitsIndex: String = String()
    var _mainsuit: String = String()
    var _startTime: String = String()
    var _endTime: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hospitalID = source._hospitalID
      _accountID = source._accountID
      _visitsItems = source._visitsItems
      _visitsNotes = source._visitsNotes
      _surgeryHistory = source._surgeryHistory
      _historyNotes = source._historyNotes
      _aestheticStyle = source._aestheticStyle
      _painTolerance = source._painTolerance
      _acceptableRecovery = source._acceptableRecovery
      _acceptableTreatment = source._acceptableTreatment
      _budgetScope = source._budgetScope
      _specialNeeds = source._specialNeeds
      _edit = source._edit
      _visitsIndex = source._visitsIndex
      _mainsuit = source._mainsuit
      _startTime = source._startTime
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._hospitalID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._accountID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._visitsItems)
        case 4: try decoder.decodeSingularStringField(value: &_storage._visitsNotes)
        case 5: try decoder.decodeSingularStringField(value: &_storage._surgeryHistory)
        case 6: try decoder.decodeSingularStringField(value: &_storage._historyNotes)
        case 7: try decoder.decodeSingularStringField(value: &_storage._aestheticStyle)
        case 8: try decoder.decodeSingularStringField(value: &_storage._painTolerance)
        case 9: try decoder.decodeSingularStringField(value: &_storage._acceptableRecovery)
        case 10: try decoder.decodeSingularStringField(value: &_storage._acceptableTreatment)
        case 11: try decoder.decodeSingularStringField(value: &_storage._budgetScope)
        case 12: try decoder.decodeSingularStringField(value: &_storage._specialNeeds)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._edit)
        case 14: try decoder.decodeSingularStringField(value: &_storage._visitsIndex)
        case 15: try decoder.decodeSingularStringField(value: &_storage._mainsuit)
        case 16: try decoder.decodeSingularStringField(value: &_storage._startTime)
        case 17: try decoder.decodeSingularStringField(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._hospitalID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hospitalID, fieldNumber: 1)
      }
      if !_storage._accountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountID, fieldNumber: 2)
      }
      if !_storage._visitsItems.isEmpty {
        try visitor.visitSingularStringField(value: _storage._visitsItems, fieldNumber: 3)
      }
      if !_storage._visitsNotes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._visitsNotes, fieldNumber: 4)
      }
      if !_storage._surgeryHistory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._surgeryHistory, fieldNumber: 5)
      }
      if !_storage._historyNotes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._historyNotes, fieldNumber: 6)
      }
      if !_storage._aestheticStyle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aestheticStyle, fieldNumber: 7)
      }
      if !_storage._painTolerance.isEmpty {
        try visitor.visitSingularStringField(value: _storage._painTolerance, fieldNumber: 8)
      }
      if !_storage._acceptableRecovery.isEmpty {
        try visitor.visitSingularStringField(value: _storage._acceptableRecovery, fieldNumber: 9)
      }
      if !_storage._acceptableTreatment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._acceptableTreatment, fieldNumber: 10)
      }
      if !_storage._budgetScope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._budgetScope, fieldNumber: 11)
      }
      if !_storage._specialNeeds.isEmpty {
        try visitor.visitSingularStringField(value: _storage._specialNeeds, fieldNumber: 12)
      }
      if _storage._edit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._edit, fieldNumber: 13)
      }
      if !_storage._visitsIndex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._visitsIndex, fieldNumber: 14)
      }
      if !_storage._mainsuit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mainsuit, fieldNumber: 15)
      }
      if !_storage._startTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._startTime, fieldNumber: 16)
      }
      if !_storage._endTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endTime, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WechatAddAppointRequest, rhs: Protogo_WechatAddAppointRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hospitalID != rhs_storage._hospitalID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._visitsItems != rhs_storage._visitsItems {return false}
        if _storage._visitsNotes != rhs_storage._visitsNotes {return false}
        if _storage._surgeryHistory != rhs_storage._surgeryHistory {return false}
        if _storage._historyNotes != rhs_storage._historyNotes {return false}
        if _storage._aestheticStyle != rhs_storage._aestheticStyle {return false}
        if _storage._painTolerance != rhs_storage._painTolerance {return false}
        if _storage._acceptableRecovery != rhs_storage._acceptableRecovery {return false}
        if _storage._acceptableTreatment != rhs_storage._acceptableTreatment {return false}
        if _storage._budgetScope != rhs_storage._budgetScope {return false}
        if _storage._specialNeeds != rhs_storage._specialNeeds {return false}
        if _storage._edit != rhs_storage._edit {return false}
        if _storage._visitsIndex != rhs_storage._visitsIndex {return false}
        if _storage._mainsuit != rhs_storage._mainsuit {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_WechatAddAppointResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WechatAddAppointResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_WechatAddAppointResponse, rhs: Protogo_WechatAddAppointResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetPropertyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPropertyRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetPropertyRequest, rhs: Protogo_GetPropertyRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetPropertyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPropertyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetPropertyResponse, rhs: Protogo_GetPropertyResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetHospitalScheduleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetHospitalScheduleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetHospitalScheduleRequest, rhs: Protogo_GetHospitalScheduleRequest) -> Bool {
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_GetHospitalScheduleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetHospitalScheduleResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_GetHospitalScheduleResponse, rhs: Protogo_GetHospitalScheduleResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
