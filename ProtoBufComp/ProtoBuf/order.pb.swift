// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: order.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///立即下单请求
///ordernow
struct Protogo_OrderNowRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  var skuID: Int32 = 0

  ///购买数量最少为1
  var skuQuantity: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_OrderNowResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_OrderNow {
    get {return _data ?? Protogo_OrderNow()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_OrderNow? = nil
}

struct Protogo_OrderNow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///repeated OrderAppointTime appoint_times =2;
  var itemInfo: Protogo_OrderItemInfo {
    get {return _itemInfo ?? Protogo_OrderItemInfo()}
    set {_itemInfo = newValue}
  }
  /// Returns true if `itemInfo` has been explicitly set.
  var hasItemInfo: Bool {return self._itemInfo != nil}
  /// Clears the value of `itemInfo`. Subsequent reads from it will return its default value.
  mutating func clearItemInfo() {self._itemInfo = nil}

  var vaildReds: [Protogo_OrderVaildReds] = []

  ///项目赠品
  var grants: [Protogo_ItemGrantInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _itemInfo: Protogo_OrderItemInfo? = nil
}

struct Protogo_OrderVaildReds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redInfo: Protogo_RedBaseInfo {
    get {return _redInfo ?? Protogo_RedBaseInfo()}
    set {_redInfo = newValue}
  }
  /// Returns true if `redInfo` has been explicitly set.
  var hasRedInfo: Bool {return self._redInfo != nil}
  /// Clears the value of `redInfo`. Subsequent reads from it will return its default value.
  mutating func clearRedInfo() {self._redInfo = nil}

  var redCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _redInfo: Protogo_RedBaseInfo? = nil
}

struct Protogo_OrderItemInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hospitalName: String = String()

  ///项目图片
  var itemPhoto: String = String()

  ///项目名称
  var itemName: String = String()

  var skuID: Int32 = 0

  ///项目规格
  var skuName: String = String()

  ///价格
  var skuPrice: Int32 = 0

  ///购买数量最少为1
  var skuQuantity: Int32 = 0

  var hospitalAddress: String = String()

  var hospitalID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///提交订单请求
///ordercommit
struct Protogo_OrderCommitRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///用户id
  var accountID: String = String()

  var hospitalID: Int32 = 0

  var skuID: Int32 = 0

  ///购买数量最少为1
  var skuQuantity: Int32 = 0

  ///sku价格
  var skuPrice: Int32 = 0

  ///预约医生id，id为空表示未选择预约时间
  var appointDoctorID: String = String()

  ///预约时间
  var appointTime: String = String()

  ///用户留言
  var userNotes: String = String()

  ///商品金额
  var orderAmount: Int32 = 0

  ///使用的红包code
  var redCode: String = String()

  ///红包面值
  var redAmount: Int32 = 0

  ///到店应付金额
  var payPrice: Int32 = 0

  ///赠品信息
  var grants: [Protogo_OrderCommitGrant] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Protogo_OrderCommitGrant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///赠品skuid
  var skuID: Int32 = 0

  ///赠品数量
  var quantity: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_OrderCommitResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: Protogo_OrderCommit {
    get {return _data ?? Protogo_OrderCommit()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
  fileprivate var _data: Protogo_OrderCommit? = nil
}

struct Protogo_OrderCommit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///订单id
  var orderID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_OrderNowRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderNowRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "sku_id"),
    3: .standard(proto: "sku_quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.skuQuantity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 2)
    }
    if self.skuQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.skuQuantity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderNowRequest, rhs: Protogo_OrderNowRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.skuQuantity != rhs.skuQuantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderNowResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderNowResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderNowResponse, rhs: Protogo_OrderNowResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderNow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderNow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_info"),
    2: .standard(proto: "vaild_reds"),
    3: .same(proto: "grants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._itemInfo)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vaildReds)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.grants)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._itemInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.vaildReds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vaildReds, fieldNumber: 2)
    }
    if !self.grants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.grants, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderNow, rhs: Protogo_OrderNow) -> Bool {
    if lhs._itemInfo != rhs._itemInfo {return false}
    if lhs.vaildReds != rhs.vaildReds {return false}
    if lhs.grants != rhs.grants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderVaildReds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderVaildReds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "red_info"),
    2: .standard(proto: "red_code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._redInfo)
      case 2: try decoder.decodeSingularStringField(value: &self.redCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._redInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.redCode.isEmpty {
      try visitor.visitSingularStringField(value: self.redCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderVaildReds, rhs: Protogo_OrderVaildReds) -> Bool {
    if lhs._redInfo != rhs._redInfo {return false}
    if lhs.redCode != rhs.redCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderItemInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderItemInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hospital_name"),
    2: .standard(proto: "item_photo"),
    3: .standard(proto: "item_name"),
    4: .standard(proto: "sku_id"),
    5: .standard(proto: "sku_name"),
    6: .standard(proto: "sku_price"),
    7: .standard(proto: "sku_quantity"),
    8: .standard(proto: "hospital_address"),
    9: .standard(proto: "hospital_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hospitalName)
      case 2: try decoder.decodeSingularStringField(value: &self.itemPhoto)
      case 3: try decoder.decodeSingularStringField(value: &self.itemName)
      case 4: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 5: try decoder.decodeSingularStringField(value: &self.skuName)
      case 6: try decoder.decodeSingularInt32Field(value: &self.skuPrice)
      case 7: try decoder.decodeSingularInt32Field(value: &self.skuQuantity)
      case 8: try decoder.decodeSingularStringField(value: &self.hospitalAddress)
      case 9: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hospitalName.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalName, fieldNumber: 1)
    }
    if !self.itemPhoto.isEmpty {
      try visitor.visitSingularStringField(value: self.itemPhoto, fieldNumber: 2)
    }
    if !self.itemName.isEmpty {
      try visitor.visitSingularStringField(value: self.itemName, fieldNumber: 3)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 4)
    }
    if !self.skuName.isEmpty {
      try visitor.visitSingularStringField(value: self.skuName, fieldNumber: 5)
    }
    if self.skuPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.skuPrice, fieldNumber: 6)
    }
    if self.skuQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.skuQuantity, fieldNumber: 7)
    }
    if !self.hospitalAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.hospitalAddress, fieldNumber: 8)
    }
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderItemInfo, rhs: Protogo_OrderItemInfo) -> Bool {
    if lhs.hospitalName != rhs.hospitalName {return false}
    if lhs.itemPhoto != rhs.itemPhoto {return false}
    if lhs.itemName != rhs.itemName {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.skuName != rhs.skuName {return false}
    if lhs.skuPrice != rhs.skuPrice {return false}
    if lhs.skuQuantity != rhs.skuQuantity {return false}
    if lhs.hospitalAddress != rhs.hospitalAddress {return false}
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderCommitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderCommitRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "hospital_id"),
    3: .standard(proto: "sku_id"),
    4: .standard(proto: "sku_quantity"),
    5: .standard(proto: "sku_price"),
    6: .standard(proto: "appoint_doctor_id"),
    7: .standard(proto: "appoint_time"),
    8: .standard(proto: "user_notes"),
    9: .standard(proto: "order_amount"),
    10: .standard(proto: "red_code"),
    11: .standard(proto: "red_amount"),
    12: .standard(proto: "pay_price"),
    13: .same(proto: "grants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.hospitalID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 4: try decoder.decodeSingularInt32Field(value: &self.skuQuantity)
      case 5: try decoder.decodeSingularInt32Field(value: &self.skuPrice)
      case 6: try decoder.decodeSingularStringField(value: &self.appointDoctorID)
      case 7: try decoder.decodeSingularStringField(value: &self.appointTime)
      case 8: try decoder.decodeSingularStringField(value: &self.userNotes)
      case 9: try decoder.decodeSingularInt32Field(value: &self.orderAmount)
      case 10: try decoder.decodeSingularStringField(value: &self.redCode)
      case 11: try decoder.decodeSingularInt32Field(value: &self.redAmount)
      case 12: try decoder.decodeSingularInt32Field(value: &self.payPrice)
      case 13: try decoder.decodeRepeatedMessageField(value: &self.grants)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if self.hospitalID != 0 {
      try visitor.visitSingularInt32Field(value: self.hospitalID, fieldNumber: 2)
    }
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 3)
    }
    if self.skuQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.skuQuantity, fieldNumber: 4)
    }
    if self.skuPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.skuPrice, fieldNumber: 5)
    }
    if !self.appointDoctorID.isEmpty {
      try visitor.visitSingularStringField(value: self.appointDoctorID, fieldNumber: 6)
    }
    if !self.appointTime.isEmpty {
      try visitor.visitSingularStringField(value: self.appointTime, fieldNumber: 7)
    }
    if !self.userNotes.isEmpty {
      try visitor.visitSingularStringField(value: self.userNotes, fieldNumber: 8)
    }
    if self.orderAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.orderAmount, fieldNumber: 9)
    }
    if !self.redCode.isEmpty {
      try visitor.visitSingularStringField(value: self.redCode, fieldNumber: 10)
    }
    if self.redAmount != 0 {
      try visitor.visitSingularInt32Field(value: self.redAmount, fieldNumber: 11)
    }
    if self.payPrice != 0 {
      try visitor.visitSingularInt32Field(value: self.payPrice, fieldNumber: 12)
    }
    if !self.grants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.grants, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderCommitRequest, rhs: Protogo_OrderCommitRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.hospitalID != rhs.hospitalID {return false}
    if lhs.skuID != rhs.skuID {return false}
    if lhs.skuQuantity != rhs.skuQuantity {return false}
    if lhs.skuPrice != rhs.skuPrice {return false}
    if lhs.appointDoctorID != rhs.appointDoctorID {return false}
    if lhs.appointTime != rhs.appointTime {return false}
    if lhs.userNotes != rhs.userNotes {return false}
    if lhs.orderAmount != rhs.orderAmount {return false}
    if lhs.redCode != rhs.redCode {return false}
    if lhs.redAmount != rhs.redAmount {return false}
    if lhs.payPrice != rhs.payPrice {return false}
    if lhs.grants != rhs.grants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderCommitGrant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderCommitGrant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sku_id"),
    2: .same(proto: "quantity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.skuID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.quantity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.skuID != 0 {
      try visitor.visitSingularInt32Field(value: self.skuID, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderCommitGrant, rhs: Protogo_OrderCommitGrant) -> Bool {
    if lhs.skuID != rhs.skuID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderCommitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderCommitResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderCommitResponse, rhs: Protogo_OrderCommitResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_OrderCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrderCommit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.orderID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_OrderCommit, rhs: Protogo_OrderCommit) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
