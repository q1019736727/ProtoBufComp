// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///用户3d模型数据
struct Protogo_QueryModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: String = String()

  var userModelid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///响应参数
struct Protogo_QueryModlesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Protogo_BaseResponse {
    get {return _base ?? Protogo_BaseResponse()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var data: [Protogo_Model] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Protogo_BaseResponse? = nil
}

struct Protogo_Model {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///'模型ID'
  var userModelid: String = String()

  ///'文件服务器人脸模型路径'
  var modelPath1: String = String()

  ///'静态测量'
  var measurementStatic: String = String()

  ///'模型创建时间'
  var cTime: String = String()

  ///'3庭5眼'
  var modelData: Protogo_ModelData {
    get {return _modelData ?? Protogo_ModelData()}
    set {_modelData = newValue}
  }
  /// Returns true if `modelData` has been explicitly set.
  var hasModelData: Bool {return self._modelData != nil}
  /// Clears the value of `modelData`. Subsequent reads from it will return its default value.
  mutating func clearModelData() {self._modelData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _modelData: Protogo_ModelData? = nil
}

/// 3庭5眼
struct Protogo_ModelData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 左眉高
  var leftEyebrowHight: Float {
    get {return _storage._leftEyebrowHight}
    set {_uniqueStorage()._leftEyebrowHight = newValue}
  }

  /// 左眉宽
  var leftEyebrowWidth: Float {
    get {return _storage._leftEyebrowWidth}
    set {_uniqueStorage()._leftEyebrowWidth = newValue}
  }

  /// 右眉高
  var rightEyebrowHight: Float {
    get {return _storage._rightEyebrowHight}
    set {_uniqueStorage()._rightEyebrowHight = newValue}
  }

  /// 右眉宽
  var rightEyebrowWidth: Float {
    get {return _storage._rightEyebrowWidth}
    set {_uniqueStorage()._rightEyebrowWidth = newValue}
  }

  /// 外眼角距
  var eyeOuterCorner: Float {
    get {return _storage._eyeOuterCorner}
    set {_uniqueStorage()._eyeOuterCorner = newValue}
  }

  /// 内眼角距
  var eyeInnerCorner: Float {
    get {return _storage._eyeInnerCorner}
    set {_uniqueStorage()._eyeInnerCorner = newValue}
  }

  /// 左眼高
  var leftEyeHight: Float {
    get {return _storage._leftEyeHight}
    set {_uniqueStorage()._leftEyeHight = newValue}
  }

  /// 左眼宽
  var leftEyeWidth: Float {
    get {return _storage._leftEyeWidth}
    set {_uniqueStorage()._leftEyeWidth = newValue}
  }

  /// 右眼高
  var rightEyeHight: Float {
    get {return _storage._rightEyeHight}
    set {_uniqueStorage()._rightEyeHight = newValue}
  }

  /// 右眼宽
  var rightEyeWidth: Float {
    get {return _storage._rightEyeWidth}
    set {_uniqueStorage()._rightEyeWidth = newValue}
  }

  /// 眼轴距
  var eyeWheelDistance: Float {
    get {return _storage._eyeWheelDistance}
    set {_uniqueStorage()._eyeWheelDistance = newValue}
  }

  /// 鼻垂高
  var noseBridgeVerticalHeight: Float {
    get {return _storage._noseBridgeVerticalHeight}
    set {_uniqueStorage()._noseBridgeVerticalHeight = newValue}
  }

  /// 鼻横高
  var noseBridgeHorizontalHeight: Float {
    get {return _storage._noseBridgeHorizontalHeight}
    set {_uniqueStorage()._noseBridgeHorizontalHeight = newValue}
  }

  /// 鼻梁角
  var noseBridgeAngle: Float {
    get {return _storage._noseBridgeAngle}
    set {_uniqueStorage()._noseBridgeAngle = newValue}
  }

  /// 鼻尖角
  var noseCuspAngle: Float {
    get {return _storage._noseCuspAngle}
    set {_uniqueStorage()._noseCuspAngle = newValue}
  }

  /// 唇高
  var lipHeight: Float {
    get {return _storage._lipHeight}
    set {_uniqueStorage()._lipHeight = newValue}
  }

  /// 唇宽
  var lipWidth: Float {
    get {return _storage._lipWidth}
    set {_uniqueStorage()._lipWidth = newValue}
  }

  /// 上庭
  var topArea: Float {
    get {return _storage._topArea}
    set {_uniqueStorage()._topArea = newValue}
  }

  /// 中庭
  var middleArea: Float {
    get {return _storage._middleArea}
    set {_uniqueStorage()._middleArea = newValue}
  }

  /// 下庭
  var bottomArea: Float {
    get {return _storage._bottomArea}
    set {_uniqueStorage()._bottomArea = newValue}
  }

  /// 一眼
  var oneRange: Float {
    get {return _storage._oneRange}
    set {_uniqueStorage()._oneRange = newValue}
  }

  /// 二眼
  var twoRange: Float {
    get {return _storage._twoRange}
    set {_uniqueStorage()._twoRange = newValue}
  }

  /// 三眼
  var threeRange: Float {
    get {return _storage._threeRange}
    set {_uniqueStorage()._threeRange = newValue}
  }

  /// 四眼
  var fourRange: Float {
    get {return _storage._fourRange}
    set {_uniqueStorage()._fourRange = newValue}
  }

  /// 五眼
  var fiveRange: Float {
    get {return _storage._fiveRange}
    set {_uniqueStorage()._fiveRange = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protogo"

extension Protogo_QueryModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryModelsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "user_modelid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.userModelid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.userModelid.isEmpty {
      try visitor.visitSingularStringField(value: self.userModelid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_QueryModelsRequest, rhs: Protogo_QueryModelsRequest) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.userModelid != rhs.userModelid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_QueryModlesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryModlesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._base)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_QueryModlesResponse, rhs: Protogo_QueryModlesResponse) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Model"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_modelid"),
    2: .standard(proto: "model_path1"),
    3: .standard(proto: "measurement_static"),
    4: .standard(proto: "c_time"),
    5: .standard(proto: "model_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userModelid)
      case 2: try decoder.decodeSingularStringField(value: &self.modelPath1)
      case 3: try decoder.decodeSingularStringField(value: &self.measurementStatic)
      case 4: try decoder.decodeSingularStringField(value: &self.cTime)
      case 5: try decoder.decodeSingularMessageField(value: &self._modelData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userModelid.isEmpty {
      try visitor.visitSingularStringField(value: self.userModelid, fieldNumber: 1)
    }
    if !self.modelPath1.isEmpty {
      try visitor.visitSingularStringField(value: self.modelPath1, fieldNumber: 2)
    }
    if !self.measurementStatic.isEmpty {
      try visitor.visitSingularStringField(value: self.measurementStatic, fieldNumber: 3)
    }
    if !self.cTime.isEmpty {
      try visitor.visitSingularStringField(value: self.cTime, fieldNumber: 4)
    }
    if let v = self._modelData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_Model, rhs: Protogo_Model) -> Bool {
    if lhs.userModelid != rhs.userModelid {return false}
    if lhs.modelPath1 != rhs.modelPath1 {return false}
    if lhs.measurementStatic != rhs.measurementStatic {return false}
    if lhs.cTime != rhs.cTime {return false}
    if lhs._modelData != rhs._modelData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protogo_ModelData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModelData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "left_eyebrow_hight"),
    2: .standard(proto: "left_eyebrow_width"),
    3: .standard(proto: "right_eyebrow_hight"),
    4: .standard(proto: "right_eyebrow_width"),
    5: .standard(proto: "eye_outer_corner"),
    6: .standard(proto: "eye_inner_corner"),
    7: .standard(proto: "left_eye_hight"),
    8: .standard(proto: "left_eye_width"),
    9: .standard(proto: "right_eye_hight"),
    10: .standard(proto: "right_eye_width"),
    11: .standard(proto: "eye_wheel_distance"),
    12: .standard(proto: "nose_bridge_vertical_height"),
    13: .standard(proto: "nose_bridge_horizontal_height"),
    14: .standard(proto: "nose_bridge_angle"),
    15: .standard(proto: "nose_cusp_angle"),
    16: .standard(proto: "lip_height"),
    17: .standard(proto: "lip_width"),
    18: .standard(proto: "top_area"),
    19: .standard(proto: "middle_area"),
    20: .standard(proto: "bottom_area"),
    21: .standard(proto: "one_range"),
    22: .standard(proto: "two_range"),
    23: .standard(proto: "three_range"),
    24: .standard(proto: "four_range"),
    25: .standard(proto: "five_range"),
  ]

  fileprivate class _StorageClass {
    var _leftEyebrowHight: Float = 0
    var _leftEyebrowWidth: Float = 0
    var _rightEyebrowHight: Float = 0
    var _rightEyebrowWidth: Float = 0
    var _eyeOuterCorner: Float = 0
    var _eyeInnerCorner: Float = 0
    var _leftEyeHight: Float = 0
    var _leftEyeWidth: Float = 0
    var _rightEyeHight: Float = 0
    var _rightEyeWidth: Float = 0
    var _eyeWheelDistance: Float = 0
    var _noseBridgeVerticalHeight: Float = 0
    var _noseBridgeHorizontalHeight: Float = 0
    var _noseBridgeAngle: Float = 0
    var _noseCuspAngle: Float = 0
    var _lipHeight: Float = 0
    var _lipWidth: Float = 0
    var _topArea: Float = 0
    var _middleArea: Float = 0
    var _bottomArea: Float = 0
    var _oneRange: Float = 0
    var _twoRange: Float = 0
    var _threeRange: Float = 0
    var _fourRange: Float = 0
    var _fiveRange: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _leftEyebrowHight = source._leftEyebrowHight
      _leftEyebrowWidth = source._leftEyebrowWidth
      _rightEyebrowHight = source._rightEyebrowHight
      _rightEyebrowWidth = source._rightEyebrowWidth
      _eyeOuterCorner = source._eyeOuterCorner
      _eyeInnerCorner = source._eyeInnerCorner
      _leftEyeHight = source._leftEyeHight
      _leftEyeWidth = source._leftEyeWidth
      _rightEyeHight = source._rightEyeHight
      _rightEyeWidth = source._rightEyeWidth
      _eyeWheelDistance = source._eyeWheelDistance
      _noseBridgeVerticalHeight = source._noseBridgeVerticalHeight
      _noseBridgeHorizontalHeight = source._noseBridgeHorizontalHeight
      _noseBridgeAngle = source._noseBridgeAngle
      _noseCuspAngle = source._noseCuspAngle
      _lipHeight = source._lipHeight
      _lipWidth = source._lipWidth
      _topArea = source._topArea
      _middleArea = source._middleArea
      _bottomArea = source._bottomArea
      _oneRange = source._oneRange
      _twoRange = source._twoRange
      _threeRange = source._threeRange
      _fourRange = source._fourRange
      _fiveRange = source._fiveRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &_storage._leftEyebrowHight)
        case 2: try decoder.decodeSingularFloatField(value: &_storage._leftEyebrowWidth)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._rightEyebrowHight)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._rightEyebrowWidth)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._eyeOuterCorner)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._eyeInnerCorner)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._leftEyeHight)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._leftEyeWidth)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._rightEyeHight)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._rightEyeWidth)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._eyeWheelDistance)
        case 12: try decoder.decodeSingularFloatField(value: &_storage._noseBridgeVerticalHeight)
        case 13: try decoder.decodeSingularFloatField(value: &_storage._noseBridgeHorizontalHeight)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._noseBridgeAngle)
        case 15: try decoder.decodeSingularFloatField(value: &_storage._noseCuspAngle)
        case 16: try decoder.decodeSingularFloatField(value: &_storage._lipHeight)
        case 17: try decoder.decodeSingularFloatField(value: &_storage._lipWidth)
        case 18: try decoder.decodeSingularFloatField(value: &_storage._topArea)
        case 19: try decoder.decodeSingularFloatField(value: &_storage._middleArea)
        case 20: try decoder.decodeSingularFloatField(value: &_storage._bottomArea)
        case 21: try decoder.decodeSingularFloatField(value: &_storage._oneRange)
        case 22: try decoder.decodeSingularFloatField(value: &_storage._twoRange)
        case 23: try decoder.decodeSingularFloatField(value: &_storage._threeRange)
        case 24: try decoder.decodeSingularFloatField(value: &_storage._fourRange)
        case 25: try decoder.decodeSingularFloatField(value: &_storage._fiveRange)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._leftEyebrowHight != 0 {
        try visitor.visitSingularFloatField(value: _storage._leftEyebrowHight, fieldNumber: 1)
      }
      if _storage._leftEyebrowWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._leftEyebrowWidth, fieldNumber: 2)
      }
      if _storage._rightEyebrowHight != 0 {
        try visitor.visitSingularFloatField(value: _storage._rightEyebrowHight, fieldNumber: 3)
      }
      if _storage._rightEyebrowWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._rightEyebrowWidth, fieldNumber: 4)
      }
      if _storage._eyeOuterCorner != 0 {
        try visitor.visitSingularFloatField(value: _storage._eyeOuterCorner, fieldNumber: 5)
      }
      if _storage._eyeInnerCorner != 0 {
        try visitor.visitSingularFloatField(value: _storage._eyeInnerCorner, fieldNumber: 6)
      }
      if _storage._leftEyeHight != 0 {
        try visitor.visitSingularFloatField(value: _storage._leftEyeHight, fieldNumber: 7)
      }
      if _storage._leftEyeWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._leftEyeWidth, fieldNumber: 8)
      }
      if _storage._rightEyeHight != 0 {
        try visitor.visitSingularFloatField(value: _storage._rightEyeHight, fieldNumber: 9)
      }
      if _storage._rightEyeWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._rightEyeWidth, fieldNumber: 10)
      }
      if _storage._eyeWheelDistance != 0 {
        try visitor.visitSingularFloatField(value: _storage._eyeWheelDistance, fieldNumber: 11)
      }
      if _storage._noseBridgeVerticalHeight != 0 {
        try visitor.visitSingularFloatField(value: _storage._noseBridgeVerticalHeight, fieldNumber: 12)
      }
      if _storage._noseBridgeHorizontalHeight != 0 {
        try visitor.visitSingularFloatField(value: _storage._noseBridgeHorizontalHeight, fieldNumber: 13)
      }
      if _storage._noseBridgeAngle != 0 {
        try visitor.visitSingularFloatField(value: _storage._noseBridgeAngle, fieldNumber: 14)
      }
      if _storage._noseCuspAngle != 0 {
        try visitor.visitSingularFloatField(value: _storage._noseCuspAngle, fieldNumber: 15)
      }
      if _storage._lipHeight != 0 {
        try visitor.visitSingularFloatField(value: _storage._lipHeight, fieldNumber: 16)
      }
      if _storage._lipWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._lipWidth, fieldNumber: 17)
      }
      if _storage._topArea != 0 {
        try visitor.visitSingularFloatField(value: _storage._topArea, fieldNumber: 18)
      }
      if _storage._middleArea != 0 {
        try visitor.visitSingularFloatField(value: _storage._middleArea, fieldNumber: 19)
      }
      if _storage._bottomArea != 0 {
        try visitor.visitSingularFloatField(value: _storage._bottomArea, fieldNumber: 20)
      }
      if _storage._oneRange != 0 {
        try visitor.visitSingularFloatField(value: _storage._oneRange, fieldNumber: 21)
      }
      if _storage._twoRange != 0 {
        try visitor.visitSingularFloatField(value: _storage._twoRange, fieldNumber: 22)
      }
      if _storage._threeRange != 0 {
        try visitor.visitSingularFloatField(value: _storage._threeRange, fieldNumber: 23)
      }
      if _storage._fourRange != 0 {
        try visitor.visitSingularFloatField(value: _storage._fourRange, fieldNumber: 24)
      }
      if _storage._fiveRange != 0 {
        try visitor.visitSingularFloatField(value: _storage._fiveRange, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Protogo_ModelData, rhs: Protogo_ModelData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._leftEyebrowHight != rhs_storage._leftEyebrowHight {return false}
        if _storage._leftEyebrowWidth != rhs_storage._leftEyebrowWidth {return false}
        if _storage._rightEyebrowHight != rhs_storage._rightEyebrowHight {return false}
        if _storage._rightEyebrowWidth != rhs_storage._rightEyebrowWidth {return false}
        if _storage._eyeOuterCorner != rhs_storage._eyeOuterCorner {return false}
        if _storage._eyeInnerCorner != rhs_storage._eyeInnerCorner {return false}
        if _storage._leftEyeHight != rhs_storage._leftEyeHight {return false}
        if _storage._leftEyeWidth != rhs_storage._leftEyeWidth {return false}
        if _storage._rightEyeHight != rhs_storage._rightEyeHight {return false}
        if _storage._rightEyeWidth != rhs_storage._rightEyeWidth {return false}
        if _storage._eyeWheelDistance != rhs_storage._eyeWheelDistance {return false}
        if _storage._noseBridgeVerticalHeight != rhs_storage._noseBridgeVerticalHeight {return false}
        if _storage._noseBridgeHorizontalHeight != rhs_storage._noseBridgeHorizontalHeight {return false}
        if _storage._noseBridgeAngle != rhs_storage._noseBridgeAngle {return false}
        if _storage._noseCuspAngle != rhs_storage._noseCuspAngle {return false}
        if _storage._lipHeight != rhs_storage._lipHeight {return false}
        if _storage._lipWidth != rhs_storage._lipWidth {return false}
        if _storage._topArea != rhs_storage._topArea {return false}
        if _storage._middleArea != rhs_storage._middleArea {return false}
        if _storage._bottomArea != rhs_storage._bottomArea {return false}
        if _storage._oneRange != rhs_storage._oneRange {return false}
        if _storage._twoRange != rhs_storage._twoRange {return false}
        if _storage._threeRange != rhs_storage._threeRange {return false}
        if _storage._fourRange != rhs_storage._fourRange {return false}
        if _storage._fiveRange != rhs_storage._fiveRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
